// THIS FILE WAS AUTO GENERATED BY model2mbed.exe DO NOT MODIFY!!!

#include "Model.h"
using namespace ModelImpl;

namespace Model {
// Channels
SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_Apace_STATE; // brodcast chan Apace

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_Apace_DATA = // brodcast chan Apace
    {
        DBGSTR("brodcast chan Apace[]"),	// name
        false,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_Apace_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_Apace = // brodcast chan Apace
    {
        &GLOBAL_CHANNEL_VAR_Apace_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_Vpace_STATE; // brodcast chan Vpace

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_Vpace_DATA = // brodcast chan Vpace
    {
        DBGSTR("brodcast chan Vpace[]"),	// name
        false,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_Vpace_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_Vpace = // brodcast chan Vpace
    {
        &GLOBAL_CHANNEL_VAR_Vpace_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_Asignal_STATE; // brodcast chan Asignal

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_Asignal_DATA = // brodcast chan Asignal
    {
        DBGSTR("brodcast chan Asignal[]"),	// name
        false,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_Asignal_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_Asignal = // brodcast chan Asignal
    {
        &GLOBAL_CHANNEL_VAR_Asignal_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_Vsignal_STATE; // brodcast chan Vsignal

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_Vsignal_DATA = // brodcast chan Vsignal
    {
        DBGSTR("brodcast chan Vsignal[]"),	// name
        false,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_Vsignal_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_Vsignal = // brodcast chan Vsignal
    {
        &GLOBAL_CHANNEL_VAR_Vsignal_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_AlarmH_STATE; // brodcast chan AlarmH

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_AlarmH_DATA = // brodcast chan AlarmH
    {
        DBGSTR("brodcast chan AlarmH[]"),	// name
        false,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_AlarmH_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_AlarmH = // brodcast chan AlarmH
    {
        &GLOBAL_CHANNEL_VAR_AlarmH_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_AlarmL_STATE; // brodcast chan AlarmL

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_AlarmL_DATA = // brodcast chan AlarmL
    {
        DBGSTR("brodcast chan AlarmL[]"),	// name
        false,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_AlarmL_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_AlarmL = // brodcast chan AlarmL
    {
        &GLOBAL_CHANNEL_VAR_AlarmL_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_NoAlarm_STATE; // brodcast chan NoAlarm

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_NoAlarm_DATA = // brodcast chan NoAlarm
    {
        DBGSTR("brodcast chan NoAlarm[]"),	// name
        false,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_NoAlarm_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_NoAlarm = // brodcast chan NoAlarm
    {
        &GLOBAL_CHANNEL_VAR_NoAlarm_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_Asense_STATE; // urgent brodcast chan Asense

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_Asense_DATA = // urgent brodcast chan Asense
    {
        DBGSTR("urgent brodcast chan Asense[]"),	// name
        true,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_Asense_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_Asense = // urgent brodcast chan Asense
    {
        &GLOBAL_CHANNEL_VAR_Asense_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_Vsense_STATE; // urgent brodcast chan Vsense

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_Vsense_DATA = // urgent brodcast chan Vsense
    {
        DBGSTR("urgent brodcast chan Vsense[]"),	// name
        true,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_Vsense_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_Vsense = // urgent brodcast chan Vsense
    {
        &GLOBAL_CHANNEL_VAR_Vsense_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_PMmodechange_STATE; // urgent brodcast chan PMmodechange

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_PMmodechange_DATA = // urgent brodcast chan PMmodechange
    {
        DBGSTR("urgent brodcast chan PMmodechange[]"),	// name
        true,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_PMmodechange_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_PMmodechange = // urgent brodcast chan PMmodechange
    {
        &GLOBAL_CHANNEL_VAR_PMmodechange_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_testPM_normal_STATE; // urgent brodcast chan testPM_normal

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_testPM_normal_DATA = // urgent brodcast chan testPM_normal
    {
        DBGSTR("urgent brodcast chan testPM_normal[]"),	// name
        true,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_testPM_normal_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_testPM_normal = // urgent brodcast chan testPM_normal
    {
        &GLOBAL_CHANNEL_VAR_testPM_normal_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_testPM_sleep_STATE; // urgent brodcast chan testPM_sleep

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_testPM_sleep_DATA = // urgent brodcast chan testPM_sleep
    {
        DBGSTR("urgent brodcast chan testPM_sleep[]"),	// name
        true,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_testPM_sleep_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_testPM_sleep = // urgent brodcast chan testPM_sleep
    {
        &GLOBAL_CHANNEL_VAR_testPM_sleep_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_testPM_sports_STATE; // urgent brodcast chan testPM_sports

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_testPM_sports_DATA = // urgent brodcast chan testPM_sports
    {
        DBGSTR("urgent brodcast chan testPM_sports[]"),	// name
        true,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_testPM_sports_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_testPM_sports = // urgent brodcast chan testPM_sports
    {
        &GLOBAL_CHANNEL_VAR_testPM_sports_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_testPM_manual_STATE; // urgent brodcast chan testPM_manual

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_testPM_manual_DATA = // urgent brodcast chan testPM_manual
    {
        DBGSTR("urgent brodcast chan testPM_manual[]"),	// name
        true,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_testPM_manual_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_testPM_manual = // urgent brodcast chan testPM_manual
    {
        &GLOBAL_CHANNEL_VAR_testPM_manual_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_testPM_gen_0_STATE; // urgent brodcast chan testPM_gen[0,3]

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_testPM_gen_0_DATA = // urgent brodcast chan testPM_gen[0,3]
    {
        DBGSTR("urgent brodcast chan testPM_gen[0,3][0]"),	// name
        true,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_testPM_gen_0_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_testPM_gen_0 = // urgent brodcast chan testPM_gen[0,3]
    {
        &GLOBAL_CHANNEL_VAR_testPM_gen_0_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_testPM_gen_1_STATE; // urgent brodcast chan testPM_gen[0,3]

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_testPM_gen_1_DATA = // urgent brodcast chan testPM_gen[0,3]
    {
        DBGSTR("urgent brodcast chan testPM_gen[0,3][1]"),	// name
        true,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_testPM_gen_1_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_testPM_gen_1 = // urgent brodcast chan testPM_gen[0,3]
    {
        &GLOBAL_CHANNEL_VAR_testPM_gen_1_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_testPM_gen_2_STATE; // urgent brodcast chan testPM_gen[0,3]

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_testPM_gen_2_DATA = // urgent brodcast chan testPM_gen[0,3]
    {
        DBGSTR("urgent brodcast chan testPM_gen[0,3][2]"),	// name
        true,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_testPM_gen_2_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_testPM_gen_2 = // urgent brodcast chan testPM_gen[0,3]
    {
        &GLOBAL_CHANNEL_VAR_testPM_gen_2_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };


ModelImpl::SYNCHRONIZATION_CHANNEL* const GLOBAL_CHANNEL_VAR_testPM_gen_ARRAY[] = 
    {
        &GLOBAL_CHANNEL_VAR_testPM_gen_0,
        &GLOBAL_CHANNEL_VAR_testPM_gen_1,
        &GLOBAL_CHANNEL_VAR_testPM_gen_2,
        NULL
    };


// ChannelsList
SYNCHRONIZATION_CHANNEL* ALL_CHANNELS[] = 
    {
        &GLOBAL_CHANNEL_VAR_Apace,
        &GLOBAL_CHANNEL_VAR_Vpace,
        &GLOBAL_CHANNEL_VAR_Asignal,
        &GLOBAL_CHANNEL_VAR_Vsignal,
        &GLOBAL_CHANNEL_VAR_AlarmH,
        &GLOBAL_CHANNEL_VAR_AlarmL,
        &GLOBAL_CHANNEL_VAR_NoAlarm,
        &GLOBAL_CHANNEL_VAR_Asense,
        &GLOBAL_CHANNEL_VAR_Vsense,
        &GLOBAL_CHANNEL_VAR_PMmodechange,
        &GLOBAL_CHANNEL_VAR_testPM_normal,
        &GLOBAL_CHANNEL_VAR_testPM_sleep,
        &GLOBAL_CHANNEL_VAR_testPM_sports,
        &GLOBAL_CHANNEL_VAR_testPM_manual,
        &GLOBAL_CHANNEL_VAR_testPM_gen_0,
        &GLOBAL_CHANNEL_VAR_testPM_gen_1,
        NULL
    };


SYSTEM_VARIABLES SystemVariables;

// Process - PM_ModeSwitch

const TRANSITION_ENTRY_DATA PM_ModeSwitch_TRANS_Init__Unnamed2__0_DATA =
    {
        DBGSTR("Init__Unnamed2__0"),	// name
        &PM_ModeSwitch_STATE_Unnamed2,				// target
        &GLOBAL_CHANNEL_VAR_testPM_sports,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_ModeSwitch_TRANS_Init__Unnamed2__0 =
    {
        &PM_ModeSwitch_TRANS_Init__Unnamed2__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_ModeSwitch_TRANS_Init__Unnamed1__0_DATA =
    {
        DBGSTR("Init__Unnamed1__0"),	// name
        &PM_ModeSwitch_STATE_Unnamed1,				// target
        &GLOBAL_CHANNEL_VAR_testPM_sleep,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_ModeSwitch_TRANS_Init__Unnamed1__0 =
    {
        &PM_ModeSwitch_TRANS_Init__Unnamed1__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_ModeSwitch_TRANS_Init__Unnamed0__0_DATA =
    {
        DBGSTR("Init__Unnamed0__0"),	// name
        &PM_ModeSwitch_STATE_Unnamed0,				// target
        &GLOBAL_CHANNEL_VAR_testPM_normal,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_ModeSwitch_TRANS_Init__Unnamed0__0 =
    {
        &PM_ModeSwitch_TRANS_Init__Unnamed0__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_ModeSwitch_TRANS_Manual__Unnamed0__0_DATA =
    {
        DBGSTR("Manual__Unnamed0__0"),	// name
        &PM_ModeSwitch_STATE_Unnamed0,				// target
        &GLOBAL_CHANNEL_VAR_testPM_normal,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_ModeSwitch_TRANS_Manual__Unnamed0__0 =
    {
        &PM_ModeSwitch_TRANS_Manual__Unnamed0__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_PM_ModeSwitch_TRANS_Unnamed0__Unnamed4__0()
{
    SystemVariables.int_GLOBAL_cur_uri = ((int)SystemVariables.int_GLOBAL_Normal_URI);
    SystemVariables.int_GLOBAL_cur_lri = ((int)SystemVariables.int_GLOBAL_Normal_LRI);
};
const TRANSITION_ENTRY_DATA PM_ModeSwitch_TRANS_Unnamed0__Unnamed4__0_DATA =
    {
        DBGSTR("Unnamed0__Unnamed4__0"),	// name
        &PM_ModeSwitch_STATE_Unnamed4,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_PM_ModeSwitch_TRANS_Unnamed0__Unnamed4__0,               // update
    };

TRANSITION_ENTRY PM_ModeSwitch_TRANS_Unnamed0__Unnamed4__0 =
    {
        &PM_ModeSwitch_TRANS_Unnamed0__Unnamed4__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_PM_ModeSwitch_TRANS_Unnamed3__Manual__0()
{
    SystemVariables.int_GLOBAL_pmmode = (1);
};
const TRANSITION_ENTRY_DATA PM_ModeSwitch_TRANS_Unnamed3__Manual__0_DATA =
    {
        DBGSTR("Unnamed3__Manual__0"),	// name
        &PM_ModeSwitch_STATE_Manual,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_PMmodechange,				// send
        NULL,               // guard
        updatefunc_PM_ModeSwitch_TRANS_Unnamed3__Manual__0,               // update
    };

TRANSITION_ENTRY PM_ModeSwitch_TRANS_Unnamed3__Manual__0 =
    {
        &PM_ModeSwitch_TRANS_Unnamed3__Manual__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_PM_ModeSwitch_TRANS_Unnamed4__Init__0()
{
    SystemVariables.int_GLOBAL_pmmode = (0);
};
const TRANSITION_ENTRY_DATA PM_ModeSwitch_TRANS_Unnamed4__Init__0_DATA =
    {
        DBGSTR("Unnamed4__Init__0"),	// name
        &PM_ModeSwitch_STATE_Init,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_PMmodechange,				// send
        NULL,               // guard
        updatefunc_PM_ModeSwitch_TRANS_Unnamed4__Init__0,               // update
    };

TRANSITION_ENTRY PM_ModeSwitch_TRANS_Unnamed4__Init__0 =
    {
        &PM_ModeSwitch_TRANS_Unnamed4__Init__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_ModeSwitch_TRANS_Unnamed5__Manual__0_DATA =
    {
        DBGSTR("Unnamed5__Manual__0"),	// name
        &PM_ModeSwitch_STATE_Manual,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_Vpace,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_ModeSwitch_TRANS_Unnamed5__Manual__0 =
    {
        &PM_ModeSwitch_TRANS_Unnamed5__Manual__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_ModeSwitch_TRANS_Manual__Unnamed5__0_DATA =
    {
        DBGSTR("Manual__Unnamed5__0"),	// name
        &PM_ModeSwitch_STATE_Unnamed5,				// target
        GLOBAL_CHANNEL_VAR_testPM_gen_ARRAY[0],				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_ModeSwitch_TRANS_Manual__Unnamed5__0 =
    {
        &PM_ModeSwitch_TRANS_Manual__Unnamed5__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_ModeSwitch_TRANS_Unnamed6__Manual__0_DATA =
    {
        DBGSTR("Unnamed6__Manual__0"),	// name
        &PM_ModeSwitch_STATE_Manual,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_Apace,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_ModeSwitch_TRANS_Unnamed6__Manual__0 =
    {
        &PM_ModeSwitch_TRANS_Unnamed6__Manual__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_ModeSwitch_TRANS_Manual__Unnamed6__0_DATA =
    {
        DBGSTR("Manual__Unnamed6__0"),	// name
        &PM_ModeSwitch_STATE_Unnamed6,				// target
        GLOBAL_CHANNEL_VAR_testPM_gen_ARRAY[1],				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_ModeSwitch_TRANS_Manual__Unnamed6__0 =
    {
        &PM_ModeSwitch_TRANS_Manual__Unnamed6__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_ModeSwitch_TRANS_Manual__Unnamed1__0_DATA =
    {
        DBGSTR("Manual__Unnamed1__0"),	// name
        &PM_ModeSwitch_STATE_Unnamed1,				// target
        &GLOBAL_CHANNEL_VAR_testPM_sleep,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_ModeSwitch_TRANS_Manual__Unnamed1__0 =
    {
        &PM_ModeSwitch_TRANS_Manual__Unnamed1__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_ModeSwitch_TRANS_Manual__Unnamed2__0_DATA =
    {
        DBGSTR("Manual__Unnamed2__0"),	// name
        &PM_ModeSwitch_STATE_Unnamed2,				// target
        &GLOBAL_CHANNEL_VAR_testPM_sports,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_ModeSwitch_TRANS_Manual__Unnamed2__0 =
    {
        &PM_ModeSwitch_TRANS_Manual__Unnamed2__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_PM_ModeSwitch_TRANS_Unnamed1__Unnamed4__0()
{
    SystemVariables.int_GLOBAL_cur_uri = ((int)SystemVariables.int_GLOBAL_Sleep_URI);
    SystemVariables.int_GLOBAL_cur_lri = ((int)SystemVariables.int_GLOBAL_Sleep_LRI);
};
const TRANSITION_ENTRY_DATA PM_ModeSwitch_TRANS_Unnamed1__Unnamed4__0_DATA =
    {
        DBGSTR("Unnamed1__Unnamed4__0"),	// name
        &PM_ModeSwitch_STATE_Unnamed4,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_PM_ModeSwitch_TRANS_Unnamed1__Unnamed4__0,               // update
    };

TRANSITION_ENTRY PM_ModeSwitch_TRANS_Unnamed1__Unnamed4__0 =
    {
        &PM_ModeSwitch_TRANS_Unnamed1__Unnamed4__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_PM_ModeSwitch_TRANS_Unnamed2__Unnamed4__0()
{
    SystemVariables.int_GLOBAL_cur_uri = ((int)SystemVariables.int_GLOBAL_Sports_URI);
    SystemVariables.int_GLOBAL_cur_lri = ((int)SystemVariables.int_GLOBAL_Sports_LRI);
};
const TRANSITION_ENTRY_DATA PM_ModeSwitch_TRANS_Unnamed2__Unnamed4__0_DATA =
    {
        DBGSTR("Unnamed2__Unnamed4__0"),	// name
        &PM_ModeSwitch_STATE_Unnamed4,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_PM_ModeSwitch_TRANS_Unnamed2__Unnamed4__0,               // update
    };

TRANSITION_ENTRY PM_ModeSwitch_TRANS_Unnamed2__Unnamed4__0 =
    {
        &PM_ModeSwitch_TRANS_Unnamed2__Unnamed4__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_ModeSwitch_TRANS_Init__Unnamed3__0_DATA =
    {
        DBGSTR("Init__Unnamed3__0"),	// name
        &PM_ModeSwitch_STATE_Unnamed3,				// target
        &GLOBAL_CHANNEL_VAR_testPM_manual,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_ModeSwitch_TRANS_Init__Unnamed3__0 =
    {
        &PM_ModeSwitch_TRANS_Init__Unnamed3__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_ModeSwitch_STATE_Unnamed0_OUT[] = 
    {
        &PM_ModeSwitch_TRANS_Unnamed0__Unnamed4__0, // Unnamed0__Unnamed4__0
    NULL
    };

const STATE_ENTRY_DATA PM_ModeSwitch_STATE_Unnamed0_DATA =
    {
        DBGSTR("Unnamed0"),	// name
        (TRANSITION_ENTRY* const*)&PM_ModeSwitch_STATE_Unnamed0_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_ModeSwitch_STATE_Unnamed0 =
    {
        &PM_ModeSwitch_STATE_Unnamed0_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_ModeSwitch_STATE_Unnamed1_OUT[] = 
    {
        &PM_ModeSwitch_TRANS_Unnamed1__Unnamed4__0, // Unnamed1__Unnamed4__0
    NULL
    };

const STATE_ENTRY_DATA PM_ModeSwitch_STATE_Unnamed1_DATA =
    {
        DBGSTR("Unnamed1"),	// name
        (TRANSITION_ENTRY* const*)&PM_ModeSwitch_STATE_Unnamed1_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_ModeSwitch_STATE_Unnamed1 =
    {
        &PM_ModeSwitch_STATE_Unnamed1_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_ModeSwitch_STATE_Unnamed2_OUT[] = 
    {
        &PM_ModeSwitch_TRANS_Unnamed2__Unnamed4__0, // Unnamed2__Unnamed4__0
    NULL
    };

const STATE_ENTRY_DATA PM_ModeSwitch_STATE_Unnamed2_DATA =
    {
        DBGSTR("Unnamed2"),	// name
        (TRANSITION_ENTRY* const*)&PM_ModeSwitch_STATE_Unnamed2_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_ModeSwitch_STATE_Unnamed2 =
    {
        &PM_ModeSwitch_STATE_Unnamed2_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_ModeSwitch_STATE_Unnamed3_OUT[] = 
    {
        &PM_ModeSwitch_TRANS_Unnamed3__Manual__0, // Unnamed3__Manual__0
    NULL
    };

const STATE_ENTRY_DATA PM_ModeSwitch_STATE_Unnamed3_DATA =
    {
        DBGSTR("Unnamed3"),	// name
        (TRANSITION_ENTRY* const*)&PM_ModeSwitch_STATE_Unnamed3_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_ModeSwitch_STATE_Unnamed3 =
    {
        &PM_ModeSwitch_STATE_Unnamed3_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_ModeSwitch_STATE_Unnamed4_OUT[] = 
    {
        &PM_ModeSwitch_TRANS_Unnamed4__Init__0, // Unnamed4__Init__0
    NULL
    };

const STATE_ENTRY_DATA PM_ModeSwitch_STATE_Unnamed4_DATA =
    {
        DBGSTR("Unnamed4"),	// name
        (TRANSITION_ENTRY* const*)&PM_ModeSwitch_STATE_Unnamed4_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_ModeSwitch_STATE_Unnamed4 =
    {
        &PM_ModeSwitch_STATE_Unnamed4_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_ModeSwitch_STATE_Unnamed5_OUT[] = 
    {
        &PM_ModeSwitch_TRANS_Unnamed5__Manual__0, // Unnamed5__Manual__0
    NULL
    };

const STATE_ENTRY_DATA PM_ModeSwitch_STATE_Unnamed5_DATA =
    {
        DBGSTR("Unnamed5"),	// name
        (TRANSITION_ENTRY* const*)&PM_ModeSwitch_STATE_Unnamed5_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_ModeSwitch_STATE_Unnamed5 =
    {
        &PM_ModeSwitch_STATE_Unnamed5_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_ModeSwitch_STATE_Unnamed6_OUT[] = 
    {
        &PM_ModeSwitch_TRANS_Unnamed6__Manual__0, // Unnamed6__Manual__0
    NULL
    };

const STATE_ENTRY_DATA PM_ModeSwitch_STATE_Unnamed6_DATA =
    {
        DBGSTR("Unnamed6"),	// name
        (TRANSITION_ENTRY* const*)&PM_ModeSwitch_STATE_Unnamed6_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_ModeSwitch_STATE_Unnamed6 =
    {
        &PM_ModeSwitch_STATE_Unnamed6_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_ModeSwitch_STATE_Manual_OUT[] = 
    {
        &PM_ModeSwitch_TRANS_Manual__Unnamed0__0, // Manual__Unnamed0__0
        &PM_ModeSwitch_TRANS_Manual__Unnamed5__0, // Manual__Unnamed5__0
        &PM_ModeSwitch_TRANS_Manual__Unnamed6__0, // Manual__Unnamed6__0
        &PM_ModeSwitch_TRANS_Manual__Unnamed1__0, // Manual__Unnamed1__0
        &PM_ModeSwitch_TRANS_Manual__Unnamed2__0, // Manual__Unnamed2__0
    NULL
    };

const STATE_ENTRY_DATA PM_ModeSwitch_STATE_Manual_DATA =
    {
        DBGSTR("Manual"),	// name
        (TRANSITION_ENTRY* const*)&PM_ModeSwitch_STATE_Manual_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_ModeSwitch_STATE_Manual =
    {
        &PM_ModeSwitch_STATE_Manual_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_ModeSwitch_STATE_Init_OUT[] = 
    {
        &PM_ModeSwitch_TRANS_Init__Unnamed2__0, // Init__Unnamed2__0
        &PM_ModeSwitch_TRANS_Init__Unnamed1__0, // Init__Unnamed1__0
        &PM_ModeSwitch_TRANS_Init__Unnamed0__0, // Init__Unnamed0__0
        &PM_ModeSwitch_TRANS_Init__Unnamed3__0, // Init__Unnamed3__0
    NULL
    };

const STATE_ENTRY_DATA PM_ModeSwitch_STATE_Init_DATA =
    {
        DBGSTR("Init"),	// name
        (TRANSITION_ENTRY* const*)&PM_ModeSwitch_STATE_Init_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_ModeSwitch_STATE_Init =
    {
        &PM_ModeSwitch_STATE_Init_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE PM_ModeSwitch_PROCESS_STATE;

PROCESS_ENTRY_THREAD PM_ModeSwitch_PROCESS_THREAD(&PM_ModeSwitch_PROCESS_STATE);

const PROCESS_ENTRY_DATA PM_ModeSwitch_PROCESS_DATA = 
    {
        DBGSTR("PM_ModeSwitch_PROCESS"),	// name
        &PM_ModeSwitch_STATE_Init, // initState
        &PM_ModeSwitch_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY PM_ModeSwitch_PROCESS = 
    {
        &PM_ModeSwitch_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE PM_ModeSwitch_PROCESS_STATE = 
    {
        &PM_ModeSwitch_PROCESS,         // process
        &PM_ModeSwitch_PROCESS_THREAD,  // thread
        &PM_ModeSwitch_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };


// Process - PM_Sensor_A

const TRANSITION_ENTRY_DATA PM_Sensor_A_TRANS_Aevent__ResetClk__0_DATA =
    {
        DBGSTR("Aevent__ResetClk__0"),	// name
        &PM_Sensor_A_STATE_ResetClk,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_Asense,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Sensor_A_TRANS_Aevent__ResetClk__0 =
    {
        &PM_Sensor_A_TRANS_Aevent__ResetClk__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Sensor_A_TRANS_Await__Aevent__0_DATA =
    {
        DBGSTR("Await__Aevent__0"),	// name
        &PM_Sensor_A_STATE_Aevent,				// target
        &GLOBAL_CHANNEL_VAR_Asignal,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Sensor_A_TRANS_Await__Aevent__0 =
    {
        &PM_Sensor_A_TRANS_Await__Aevent__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_PM_Sensor_A_TRANS_Wait_URI__Await__0()
{
    return ((((int)SystemVariables.clk_GLOBAL_clk_aa) >= ((int)SystemVariables.int_GLOBAL_cur_uri)));
};
const TRANSITION_ENTRY_DATA PM_Sensor_A_TRANS_Wait_URI__Await__0_DATA =
    {
        DBGSTR("Wait_URI__Await__0"),	// name
        &PM_Sensor_A_STATE_Await,				// target
        NULL,				// receive
        NULL,				// send
        guardfunc_PM_Sensor_A_TRANS_Wait_URI__Await__0,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Sensor_A_TRANS_Wait_URI__Await__0 =
    {
        &PM_Sensor_A_TRANS_Wait_URI__Await__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_PM_Sensor_A_TRANS_Wait_PVARP__Wait_URI__0()
{
    return ((((int)SystemVariables.clk_GLOBAL_clk_pvarp) >= ((int)SystemVariables.int_GLOBAL_cur_pvarp)));
};
const TRANSITION_ENTRY_DATA PM_Sensor_A_TRANS_Wait_PVARP__Wait_URI__0_DATA =
    {
        DBGSTR("Wait_PVARP__Wait_URI__0"),	// name
        &PM_Sensor_A_STATE_Wait_URI,				// target
        NULL,				// receive
        NULL,				// send
        guardfunc_PM_Sensor_A_TRANS_Wait_PVARP__Wait_URI__0,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Sensor_A_TRANS_Wait_PVARP__Wait_URI__0 =
    {
        &PM_Sensor_A_TRANS_Wait_PVARP__Wait_URI__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_PM_Sensor_A_TRANS_VEvent__Wait_PVARP__0()
{
    SystemVariables.clk_GLOBAL_clk_pvarp = (0);
};
const TRANSITION_ENTRY_DATA PM_Sensor_A_TRANS_VEvent__Wait_PVARP__0_DATA =
    {
        DBGSTR("VEvent__Wait_PVARP__0"),	// name
        &PM_Sensor_A_STATE_Wait_PVARP,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_PM_Sensor_A_TRANS_VEvent__Wait_PVARP__0,               // update
    };

TRANSITION_ENTRY PM_Sensor_A_TRANS_VEvent__Wait_PVARP__0 =
    {
        &PM_Sensor_A_TRANS_VEvent__Wait_PVARP__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Sensor_A_TRANS_WaitAVI__VEvent__0_DATA =
    {
        DBGSTR("WaitAVI__VEvent__0"),	// name
        &PM_Sensor_A_STATE_VEvent,				// target
        &GLOBAL_CHANNEL_VAR_Vsense,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Sensor_A_TRANS_WaitAVI__VEvent__0 =
    {
        &PM_Sensor_A_TRANS_WaitAVI__VEvent__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Sensor_A_TRANS_WaitAVI__VEvent__1_DATA =
    {
        DBGSTR("WaitAVI__VEvent__1"),	// name
        &PM_Sensor_A_STATE_VEvent,				// target
        &GLOBAL_CHANNEL_VAR_Vpace,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Sensor_A_TRANS_WaitAVI__VEvent__1 =
    {
        &PM_Sensor_A_TRANS_WaitAVI__VEvent__1_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_PM_Sensor_A_TRANS_ResetClk__WaitAVI__0()
{
    SystemVariables.clk_GLOBAL_clk_aa = (0);
};
const TRANSITION_ENTRY_DATA PM_Sensor_A_TRANS_ResetClk__WaitAVI__0_DATA =
    {
        DBGSTR("ResetClk__WaitAVI__0"),	// name
        &PM_Sensor_A_STATE_WaitAVI,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_PM_Sensor_A_TRANS_ResetClk__WaitAVI__0,               // update
    };

TRANSITION_ENTRY PM_Sensor_A_TRANS_ResetClk__WaitAVI__0 =
    {
        &PM_Sensor_A_TRANS_ResetClk__WaitAVI__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Sensor_A_TRANS_Await__ResetClk__0_DATA =
    {
        DBGSTR("Await__ResetClk__0"),	// name
        &PM_Sensor_A_STATE_ResetClk,				// target
        &GLOBAL_CHANNEL_VAR_Apace,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Sensor_A_TRANS_Await__ResetClk__0 =
    {
        &PM_Sensor_A_TRANS_Await__ResetClk__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Sensor_A_STATE_Aevent_OUT[] = 
    {
        &PM_Sensor_A_TRANS_Aevent__ResetClk__0, // Aevent__ResetClk__0
    NULL
    };

const STATE_ENTRY_DATA PM_Sensor_A_STATE_Aevent_DATA =
    {
        DBGSTR("Aevent"),	// name
        (TRANSITION_ENTRY* const*)&PM_Sensor_A_STATE_Aevent_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Sensor_A_STATE_Aevent =
    {
        &PM_Sensor_A_STATE_Aevent_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

static bool guardfunc_PM_Sensor_A_STATE_Wait_URI()
{
    return ((((int)SystemVariables.clk_GLOBAL_clk_aa) <= ((int)SystemVariables.int_GLOBAL_cur_uri)));
};
const TRANSITION_ENTRY* PM_Sensor_A_STATE_Wait_URI_OUT[] = 
    {
        &PM_Sensor_A_TRANS_Wait_URI__Await__0, // Wait_URI__Await__0
    NULL
    };

const STATE_ENTRY_DATA PM_Sensor_A_STATE_Wait_URI_DATA =
    {
        DBGSTR("Wait_URI"),	// name
        (TRANSITION_ENTRY* const*)&PM_Sensor_A_STATE_Wait_URI_OUT,	// target
        StateNormal, // mode
        guardfunc_PM_Sensor_A_STATE_Wait_URI, // guard
    };

STATE_ENTRY PM_Sensor_A_STATE_Wait_URI =
    {
        &PM_Sensor_A_STATE_Wait_URI_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

static bool guardfunc_PM_Sensor_A_STATE_Wait_PVARP()
{
    return ((((int)SystemVariables.clk_GLOBAL_clk_pvarp) <= ((int)SystemVariables.int_GLOBAL_cur_pvarp)));
};
const TRANSITION_ENTRY* PM_Sensor_A_STATE_Wait_PVARP_OUT[] = 
    {
        &PM_Sensor_A_TRANS_Wait_PVARP__Wait_URI__0, // Wait_PVARP__Wait_URI__0
    NULL
    };

const STATE_ENTRY_DATA PM_Sensor_A_STATE_Wait_PVARP_DATA =
    {
        DBGSTR("Wait_PVARP"),	// name
        (TRANSITION_ENTRY* const*)&PM_Sensor_A_STATE_Wait_PVARP_OUT,	// target
        StateNormal, // mode
        guardfunc_PM_Sensor_A_STATE_Wait_PVARP, // guard
    };

STATE_ENTRY PM_Sensor_A_STATE_Wait_PVARP =
    {
        &PM_Sensor_A_STATE_Wait_PVARP_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Sensor_A_STATE_VEvent_OUT[] = 
    {
        &PM_Sensor_A_TRANS_VEvent__Wait_PVARP__0, // VEvent__Wait_PVARP__0
    NULL
    };

const STATE_ENTRY_DATA PM_Sensor_A_STATE_VEvent_DATA =
    {
        DBGSTR("VEvent"),	// name
        (TRANSITION_ENTRY* const*)&PM_Sensor_A_STATE_VEvent_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Sensor_A_STATE_VEvent =
    {
        &PM_Sensor_A_STATE_VEvent_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Sensor_A_STATE_WaitAVI_OUT[] = 
    {
        &PM_Sensor_A_TRANS_WaitAVI__VEvent__0, // WaitAVI__VEvent__0
        &PM_Sensor_A_TRANS_WaitAVI__VEvent__1, // WaitAVI__VEvent__1
    NULL
    };

const STATE_ENTRY_DATA PM_Sensor_A_STATE_WaitAVI_DATA =
    {
        DBGSTR("WaitAVI"),	// name
        (TRANSITION_ENTRY* const*)&PM_Sensor_A_STATE_WaitAVI_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Sensor_A_STATE_WaitAVI =
    {
        &PM_Sensor_A_STATE_WaitAVI_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Sensor_A_STATE_ResetClk_OUT[] = 
    {
        &PM_Sensor_A_TRANS_ResetClk__WaitAVI__0, // ResetClk__WaitAVI__0
    NULL
    };

const STATE_ENTRY_DATA PM_Sensor_A_STATE_ResetClk_DATA =
    {
        DBGSTR("ResetClk"),	// name
        (TRANSITION_ENTRY* const*)&PM_Sensor_A_STATE_ResetClk_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Sensor_A_STATE_ResetClk =
    {
        &PM_Sensor_A_STATE_ResetClk_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Sensor_A_STATE_Await_OUT[] = 
    {
        &PM_Sensor_A_TRANS_Await__Aevent__0, // Await__Aevent__0
        &PM_Sensor_A_TRANS_Await__ResetClk__0, // Await__ResetClk__0
    NULL
    };

const STATE_ENTRY_DATA PM_Sensor_A_STATE_Await_DATA =
    {
        DBGSTR("Await"),	// name
        (TRANSITION_ENTRY* const*)&PM_Sensor_A_STATE_Await_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Sensor_A_STATE_Await =
    {
        &PM_Sensor_A_STATE_Await_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE PM_Sensor_A_PROCESS_STATE;

PROCESS_ENTRY_THREAD PM_Sensor_A_PROCESS_THREAD(&PM_Sensor_A_PROCESS_STATE);

const PROCESS_ENTRY_DATA PM_Sensor_A_PROCESS_DATA = 
    {
        DBGSTR("PM_Sensor_A_PROCESS"),	// name
        &PM_Sensor_A_STATE_Await, // initState
        &PM_Sensor_A_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY PM_Sensor_A_PROCESS = 
    {
        &PM_Sensor_A_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE PM_Sensor_A_PROCESS_STATE = 
    {
        &PM_Sensor_A_PROCESS,         // process
        &PM_Sensor_A_PROCESS_THREAD,  // thread
        &PM_Sensor_A_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };


// Process - PM_Sensor_V

const TRANSITION_ENTRY_DATA PM_Sensor_V_TRANS_PVC__Init__0_DATA =
    {
        DBGSTR("PVC__Init__0"),	// name
        &PM_Sensor_V_STATE_Init,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_Vsense,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Sensor_V_TRANS_PVC__Init__0 =
    {
        &PM_Sensor_V_TRANS_PVC__Init__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Sensor_V_TRANS_Init__PVC__0_DATA =
    {
        DBGSTR("Init__PVC__0"),	// name
        &PM_Sensor_V_STATE_PVC,				// target
        &GLOBAL_CHANNEL_VAR_Vsignal,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Sensor_V_TRANS_Init__PVC__0 =
    {
        &PM_Sensor_V_TRANS_Init__PVC__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Sensor_V_TRANS_Unnamed7__VEvent__0_DATA =
    {
        DBGSTR("Unnamed7__VEvent__0"),	// name
        &PM_Sensor_V_STATE_VEvent,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_Vsense,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Sensor_V_TRANS_Unnamed7__VEvent__0 =
    {
        &PM_Sensor_V_TRANS_Unnamed7__VEvent__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Sensor_V_TRANS_WaitVEvent__Unnamed7__0_DATA =
    {
        DBGSTR("WaitVEvent__Unnamed7__0"),	// name
        &PM_Sensor_V_STATE_Unnamed7,				// target
        &GLOBAL_CHANNEL_VAR_Vsignal,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Sensor_V_TRANS_WaitVEvent__Unnamed7__0 =
    {
        &PM_Sensor_V_TRANS_WaitVEvent__Unnamed7__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Sensor_V_TRANS_DoneVRP__Init__0_DATA =
    {
        DBGSTR("DoneVRP__Init__0"),	// name
        &PM_Sensor_V_STATE_Init,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Sensor_V_TRANS_DoneVRP__Init__0 =
    {
        &PM_Sensor_V_TRANS_DoneVRP__Init__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_PM_Sensor_V_TRANS_WaitVRP__DoneVRP__0()
{
    return ((((int)SystemVariables.clk_PM_Sensor_V_clkt) >= ((int)SystemVariables.int_GLOBAL_cur_vrp)));
};
const TRANSITION_ENTRY_DATA PM_Sensor_V_TRANS_WaitVRP__DoneVRP__0_DATA =
    {
        DBGSTR("WaitVRP__DoneVRP__0"),	// name
        &PM_Sensor_V_STATE_DoneVRP,				// target
        NULL,				// receive
        NULL,				// send
        guardfunc_PM_Sensor_V_TRANS_WaitVRP__DoneVRP__0,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Sensor_V_TRANS_WaitVRP__DoneVRP__0 =
    {
        &PM_Sensor_V_TRANS_WaitVRP__DoneVRP__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_PM_Sensor_V_TRANS_VEvent__WaitVRP__0()
{
    SystemVariables.clk_PM_Sensor_V_clkt = (0);
};
const TRANSITION_ENTRY_DATA PM_Sensor_V_TRANS_VEvent__WaitVRP__0_DATA =
    {
        DBGSTR("VEvent__WaitVRP__0"),	// name
        &PM_Sensor_V_STATE_WaitVRP,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_PM_Sensor_V_TRANS_VEvent__WaitVRP__0,               // update
    };

TRANSITION_ENTRY PM_Sensor_V_TRANS_VEvent__WaitVRP__0 =
    {
        &PM_Sensor_V_TRANS_VEvent__WaitVRP__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Sensor_V_TRANS_WaitVEvent__VEvent__0_DATA =
    {
        DBGSTR("WaitVEvent__VEvent__0"),	// name
        &PM_Sensor_V_STATE_VEvent,				// target
        &GLOBAL_CHANNEL_VAR_Vpace,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Sensor_V_TRANS_WaitVEvent__VEvent__0 =
    {
        &PM_Sensor_V_TRANS_WaitVEvent__VEvent__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_PM_Sensor_V_TRANS_Wait_PVAB__WaitVEvent__0()
{
    return ((((int)SystemVariables.clk_PM_Sensor_V_clkt) >= ((int)SystemVariables.int_GLOBAL_cur_pvab)));
};
const TRANSITION_ENTRY_DATA PM_Sensor_V_TRANS_Wait_PVAB__WaitVEvent__0_DATA =
    {
        DBGSTR("Wait_PVAB__WaitVEvent__0"),	// name
        &PM_Sensor_V_STATE_WaitVEvent,				// target
        NULL,				// receive
        NULL,				// send
        guardfunc_PM_Sensor_V_TRANS_Wait_PVAB__WaitVEvent__0,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Sensor_V_TRANS_Wait_PVAB__WaitVEvent__0 =
    {
        &PM_Sensor_V_TRANS_Wait_PVAB__WaitVEvent__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_PM_Sensor_V_TRANS_Init_PVAB__Wait_PVAB__0()
{
    SystemVariables.clk_PM_Sensor_V_clkt = (0);
};
const TRANSITION_ENTRY_DATA PM_Sensor_V_TRANS_Init_PVAB__Wait_PVAB__0_DATA =
    {
        DBGSTR("Init_PVAB__Wait_PVAB__0"),	// name
        &PM_Sensor_V_STATE_Wait_PVAB,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_PM_Sensor_V_TRANS_Init_PVAB__Wait_PVAB__0,               // update
    };

TRANSITION_ENTRY PM_Sensor_V_TRANS_Init_PVAB__Wait_PVAB__0 =
    {
        &PM_Sensor_V_TRANS_Init_PVAB__Wait_PVAB__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Sensor_V_TRANS_Init__Init_PVAB__0_DATA =
    {
        DBGSTR("Init__Init_PVAB__0"),	// name
        &PM_Sensor_V_STATE_Init_PVAB,				// target
        &GLOBAL_CHANNEL_VAR_Apace,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Sensor_V_TRANS_Init__Init_PVAB__0 =
    {
        &PM_Sensor_V_TRANS_Init__Init_PVAB__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Sensor_V_TRANS_Init__Init_PVAB__1_DATA =
    {
        DBGSTR("Init__Init_PVAB__1"),	// name
        &PM_Sensor_V_STATE_Init_PVAB,				// target
        &GLOBAL_CHANNEL_VAR_Asense,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Sensor_V_TRANS_Init__Init_PVAB__1 =
    {
        &PM_Sensor_V_TRANS_Init__Init_PVAB__1_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Sensor_V_STATE_PVC_OUT[] = 
    {
        &PM_Sensor_V_TRANS_PVC__Init__0, // PVC__Init__0
    NULL
    };

const STATE_ENTRY_DATA PM_Sensor_V_STATE_PVC_DATA =
    {
        DBGSTR("PVC"),	// name
        (TRANSITION_ENTRY* const*)&PM_Sensor_V_STATE_PVC_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Sensor_V_STATE_PVC =
    {
        &PM_Sensor_V_STATE_PVC_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Sensor_V_STATE_Unnamed7_OUT[] = 
    {
        &PM_Sensor_V_TRANS_Unnamed7__VEvent__0, // Unnamed7__VEvent__0
    NULL
    };

const STATE_ENTRY_DATA PM_Sensor_V_STATE_Unnamed7_DATA =
    {
        DBGSTR("Unnamed7"),	// name
        (TRANSITION_ENTRY* const*)&PM_Sensor_V_STATE_Unnamed7_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Sensor_V_STATE_Unnamed7 =
    {
        &PM_Sensor_V_STATE_Unnamed7_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Sensor_V_STATE_DoneVRP_OUT[] = 
    {
        &PM_Sensor_V_TRANS_DoneVRP__Init__0, // DoneVRP__Init__0
    NULL
    };

const STATE_ENTRY_DATA PM_Sensor_V_STATE_DoneVRP_DATA =
    {
        DBGSTR("DoneVRP"),	// name
        (TRANSITION_ENTRY* const*)&PM_Sensor_V_STATE_DoneVRP_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Sensor_V_STATE_DoneVRP =
    {
        &PM_Sensor_V_STATE_DoneVRP_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

static bool guardfunc_PM_Sensor_V_STATE_WaitVRP()
{
    return ((((int)SystemVariables.clk_PM_Sensor_V_clkt) <= ((int)SystemVariables.int_GLOBAL_cur_vrp)));
};
const TRANSITION_ENTRY* PM_Sensor_V_STATE_WaitVRP_OUT[] = 
    {
        &PM_Sensor_V_TRANS_WaitVRP__DoneVRP__0, // WaitVRP__DoneVRP__0
    NULL
    };

const STATE_ENTRY_DATA PM_Sensor_V_STATE_WaitVRP_DATA =
    {
        DBGSTR("WaitVRP"),	// name
        (TRANSITION_ENTRY* const*)&PM_Sensor_V_STATE_WaitVRP_OUT,	// target
        StateNormal, // mode
        guardfunc_PM_Sensor_V_STATE_WaitVRP, // guard
    };

STATE_ENTRY PM_Sensor_V_STATE_WaitVRP =
    {
        &PM_Sensor_V_STATE_WaitVRP_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Sensor_V_STATE_VEvent_OUT[] = 
    {
        &PM_Sensor_V_TRANS_VEvent__WaitVRP__0, // VEvent__WaitVRP__0
    NULL
    };

const STATE_ENTRY_DATA PM_Sensor_V_STATE_VEvent_DATA =
    {
        DBGSTR("VEvent"),	// name
        (TRANSITION_ENTRY* const*)&PM_Sensor_V_STATE_VEvent_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Sensor_V_STATE_VEvent =
    {
        &PM_Sensor_V_STATE_VEvent_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Sensor_V_STATE_WaitVEvent_OUT[] = 
    {
        &PM_Sensor_V_TRANS_WaitVEvent__Unnamed7__0, // WaitVEvent__Unnamed7__0
        &PM_Sensor_V_TRANS_WaitVEvent__VEvent__0, // WaitVEvent__VEvent__0
    NULL
    };

const STATE_ENTRY_DATA PM_Sensor_V_STATE_WaitVEvent_DATA =
    {
        DBGSTR("WaitVEvent"),	// name
        (TRANSITION_ENTRY* const*)&PM_Sensor_V_STATE_WaitVEvent_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Sensor_V_STATE_WaitVEvent =
    {
        &PM_Sensor_V_STATE_WaitVEvent_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

static bool guardfunc_PM_Sensor_V_STATE_Wait_PVAB()
{
    return ((((int)SystemVariables.clk_PM_Sensor_V_clkt) <= ((int)SystemVariables.int_GLOBAL_cur_pvab)));
};
const TRANSITION_ENTRY* PM_Sensor_V_STATE_Wait_PVAB_OUT[] = 
    {
        &PM_Sensor_V_TRANS_Wait_PVAB__WaitVEvent__0, // Wait_PVAB__WaitVEvent__0
    NULL
    };

const STATE_ENTRY_DATA PM_Sensor_V_STATE_Wait_PVAB_DATA =
    {
        DBGSTR("Wait_PVAB"),	// name
        (TRANSITION_ENTRY* const*)&PM_Sensor_V_STATE_Wait_PVAB_OUT,	// target
        StateNormal, // mode
        guardfunc_PM_Sensor_V_STATE_Wait_PVAB, // guard
    };

STATE_ENTRY PM_Sensor_V_STATE_Wait_PVAB =
    {
        &PM_Sensor_V_STATE_Wait_PVAB_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Sensor_V_STATE_Init_PVAB_OUT[] = 
    {
        &PM_Sensor_V_TRANS_Init_PVAB__Wait_PVAB__0, // Init_PVAB__Wait_PVAB__0
    NULL
    };

const STATE_ENTRY_DATA PM_Sensor_V_STATE_Init_PVAB_DATA =
    {
        DBGSTR("Init_PVAB"),	// name
        (TRANSITION_ENTRY* const*)&PM_Sensor_V_STATE_Init_PVAB_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Sensor_V_STATE_Init_PVAB =
    {
        &PM_Sensor_V_STATE_Init_PVAB_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Sensor_V_STATE_Init_OUT[] = 
    {
        &PM_Sensor_V_TRANS_Init__PVC__0, // Init__PVC__0
        &PM_Sensor_V_TRANS_Init__Init_PVAB__0, // Init__Init_PVAB__0
        &PM_Sensor_V_TRANS_Init__Init_PVAB__1, // Init__Init_PVAB__1
    NULL
    };

const STATE_ENTRY_DATA PM_Sensor_V_STATE_Init_DATA =
    {
        DBGSTR("Init"),	// name
        (TRANSITION_ENTRY* const*)&PM_Sensor_V_STATE_Init_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Sensor_V_STATE_Init =
    {
        &PM_Sensor_V_STATE_Init_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE PM_Sensor_V_PROCESS_STATE;

PROCESS_ENTRY_THREAD PM_Sensor_V_PROCESS_THREAD(&PM_Sensor_V_PROCESS_STATE);

const PROCESS_ENTRY_DATA PM_Sensor_V_PROCESS_DATA = 
    {
        DBGSTR("PM_Sensor_V_PROCESS"),	// name
        &PM_Sensor_V_STATE_Init, // initState
        &PM_Sensor_V_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY PM_Sensor_V_PROCESS = 
    {
        &PM_Sensor_V_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE PM_Sensor_V_PROCESS_STATE = 
    {
        &PM_Sensor_V_PROCESS,         // process
        &PM_Sensor_V_PROCESS_THREAD,  // thread
        &PM_Sensor_V_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };


// Process - PM_Pacer_AA

const TRANSITION_ENTRY_DATA PM_Pacer_AA_TRANS_PaceV__Vevent__0_DATA =
    {
        DBGSTR("PaceV__Vevent__0"),	// name
        &PM_Pacer_AA_STATE_Vevent,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_Vpace,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Pacer_AA_TRANS_PaceV__Vevent__0 =
    {
        &PM_Pacer_AA_TRANS_PaceV__Vevent__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_PM_Pacer_AA_TRANS_Adone__PMManualMode__0()
{
    return ((((int)SystemVariables.int_GLOBAL_pmmode) == (1)));
};
const TRANSITION_ENTRY_DATA PM_Pacer_AA_TRANS_Adone__PMManualMode__0_DATA =
    {
        DBGSTR("Adone__PMManualMode__0"),	// name
        &PM_Pacer_AA_STATE_PMManualMode,				// target
        &GLOBAL_CHANNEL_VAR_PMmodechange,				// receive
        NULL,				// send
        guardfunc_PM_Pacer_AA_TRANS_Adone__PMManualMode__0,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Pacer_AA_TRANS_Adone__PMManualMode__0 =
    {
        &PM_Pacer_AA_TRANS_Adone__PMManualMode__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_PM_Pacer_AA_TRANS_PaceA__PMManualMode__0()
{
    return ((((int)SystemVariables.int_GLOBAL_pmmode) == (1)));
};
const TRANSITION_ENTRY_DATA PM_Pacer_AA_TRANS_PaceA__PMManualMode__0_DATA =
    {
        DBGSTR("PaceA__PMManualMode__0"),	// name
        &PM_Pacer_AA_STATE_PMManualMode,				// target
        &GLOBAL_CHANNEL_VAR_PMmodechange,				// receive
        NULL,				// send
        guardfunc_PM_Pacer_AA_TRANS_PaceA__PMManualMode__0,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Pacer_AA_TRANS_PaceA__PMManualMode__0 =
    {
        &PM_Pacer_AA_TRANS_PaceA__PMManualMode__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_PM_Pacer_AA_TRANS_PVC__PMManualMode__0()
{
    return ((((int)SystemVariables.int_GLOBAL_pmmode) == (1)));
};
const TRANSITION_ENTRY_DATA PM_Pacer_AA_TRANS_PVC__PMManualMode__0_DATA =
    {
        DBGSTR("PVC__PMManualMode__0"),	// name
        &PM_Pacer_AA_STATE_PMManualMode,				// target
        &GLOBAL_CHANNEL_VAR_PMmodechange,				// receive
        NULL,				// send
        guardfunc_PM_Pacer_AA_TRANS_PVC__PMManualMode__0,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Pacer_AA_TRANS_PVC__PMManualMode__0 =
    {
        &PM_Pacer_AA_TRANS_PVC__PMManualMode__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_PM_Pacer_AA_TRANS_Vevent__PMManualMode__0()
{
    return ((((int)SystemVariables.int_GLOBAL_pmmode) == (1)));
};
const TRANSITION_ENTRY_DATA PM_Pacer_AA_TRANS_Vevent__PMManualMode__0_DATA =
    {
        DBGSTR("Vevent__PMManualMode__0"),	// name
        &PM_Pacer_AA_STATE_PMManualMode,				// target
        &GLOBAL_CHANNEL_VAR_PMmodechange,				// receive
        NULL,				// send
        guardfunc_PM_Pacer_AA_TRANS_Vevent__PMManualMode__0,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Pacer_AA_TRANS_Vevent__PMManualMode__0 =
    {
        &PM_Pacer_AA_TRANS_Vevent__PMManualMode__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_PM_Pacer_AA_TRANS_AVI_Wait__PMManualMode__0()
{
    return ((((int)SystemVariables.int_GLOBAL_pmmode) == (1)));
};
const TRANSITION_ENTRY_DATA PM_Pacer_AA_TRANS_AVI_Wait__PMManualMode__0_DATA =
    {
        DBGSTR("AVI_Wait__PMManualMode__0"),	// name
        &PM_Pacer_AA_STATE_PMManualMode,				// target
        &GLOBAL_CHANNEL_VAR_PMmodechange,				// receive
        NULL,				// send
        guardfunc_PM_Pacer_AA_TRANS_AVI_Wait__PMManualMode__0,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Pacer_AA_TRANS_AVI_Wait__PMManualMode__0 =
    {
        &PM_Pacer_AA_TRANS_AVI_Wait__PMManualMode__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_PM_Pacer_AA_TRANS_PMManualMode__AVI_Wait__0()
{
    return ((((int)SystemVariables.int_GLOBAL_pmmode) == (0)));
};
const TRANSITION_ENTRY_DATA PM_Pacer_AA_TRANS_PMManualMode__AVI_Wait__0_DATA =
    {
        DBGSTR("PMManualMode__AVI_Wait__0"),	// name
        &PM_Pacer_AA_STATE_AVI_Wait,				// target
        &GLOBAL_CHANNEL_VAR_PMmodechange,				// receive
        NULL,				// send
        guardfunc_PM_Pacer_AA_TRANS_PMManualMode__AVI_Wait__0,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Pacer_AA_TRANS_PMManualMode__AVI_Wait__0 =
    {
        &PM_Pacer_AA_TRANS_PMManualMode__AVI_Wait__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Pacer_AA_TRANS_PVC__Adone__0_DATA =
    {
        DBGSTR("PVC__Adone__0"),	// name
        &PM_Pacer_AA_STATE_Adone,				// target
        &GLOBAL_CHANNEL_VAR_Asense,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Pacer_AA_TRANS_PVC__Adone__0 =
    {
        &PM_Pacer_AA_TRANS_PVC__Adone__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Pacer_AA_TRANS_PaceA__Adone__0_DATA =
    {
        DBGSTR("PaceA__Adone__0"),	// name
        &PM_Pacer_AA_STATE_Adone,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_Apace,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Pacer_AA_TRANS_PaceA__Adone__0 =
    {
        &PM_Pacer_AA_TRANS_PaceA__Adone__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_PM_Pacer_AA_TRANS_Adone__AVI_Wait__0()
{
    SystemVariables.clk_GLOBAL_clk_aa = (0);
};
const TRANSITION_ENTRY_DATA PM_Pacer_AA_TRANS_Adone__AVI_Wait__0_DATA =
    {
        DBGSTR("Adone__AVI_Wait__0"),	// name
        &PM_Pacer_AA_STATE_AVI_Wait,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_PM_Pacer_AA_TRANS_Adone__AVI_Wait__0,               // update
    };

TRANSITION_ENTRY PM_Pacer_AA_TRANS_Adone__AVI_Wait__0 =
    {
        &PM_Pacer_AA_TRANS_Adone__AVI_Wait__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Pacer_AA_TRANS_Vevent__Adone__0_DATA =
    {
        DBGSTR("Vevent__Adone__0"),	// name
        &PM_Pacer_AA_STATE_Adone,				// target
        &GLOBAL_CHANNEL_VAR_Asense,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Pacer_AA_TRANS_Vevent__Adone__0 =
    {
        &PM_Pacer_AA_TRANS_Vevent__Adone__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_PM_Pacer_AA_TRANS_PVC__PaceA__0()
{
    return ((((int)SystemVariables.clk_GLOBAL_clk_aa) >= ((((int)SystemVariables.int_GLOBAL_cur_lri) - ((int)SystemVariables.int_GLOBAL_cur_avi)))));
};
const TRANSITION_ENTRY_DATA PM_Pacer_AA_TRANS_PVC__PaceA__0_DATA =
    {
        DBGSTR("PVC__PaceA__0"),	// name
        &PM_Pacer_AA_STATE_PaceA,				// target
        NULL,				// receive
        NULL,				// send
        guardfunc_PM_Pacer_AA_TRANS_PVC__PaceA__0,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Pacer_AA_TRANS_PVC__PaceA__0 =
    {
        &PM_Pacer_AA_TRANS_PVC__PaceA__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_PM_Pacer_AA_TRANS_Vevent__PVC__0()
{
    SystemVariables.clk_GLOBAL_clk_aa = (0);
};
const TRANSITION_ENTRY_DATA PM_Pacer_AA_TRANS_Vevent__PVC__0_DATA =
    {
        DBGSTR("Vevent__PVC__0"),	// name
        &PM_Pacer_AA_STATE_PVC,				// target
        &GLOBAL_CHANNEL_VAR_Vsense,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_PM_Pacer_AA_TRANS_Vevent__PVC__0,               // update
    };

TRANSITION_ENTRY PM_Pacer_AA_TRANS_Vevent__PVC__0 =
    {
        &PM_Pacer_AA_TRANS_Vevent__PVC__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_PM_Pacer_AA_TRANS_Vevent__PaceA__0()
{
    return ((((int)SystemVariables.clk_GLOBAL_clk_aa) >= ((int)SystemVariables.int_GLOBAL_cur_lri)));
};
const TRANSITION_ENTRY_DATA PM_Pacer_AA_TRANS_Vevent__PaceA__0_DATA =
    {
        DBGSTR("Vevent__PaceA__0"),	// name
        &PM_Pacer_AA_STATE_PaceA,				// target
        NULL,				// receive
        NULL,				// send
        guardfunc_PM_Pacer_AA_TRANS_Vevent__PaceA__0,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Pacer_AA_TRANS_Vevent__PaceA__0 =
    {
        &PM_Pacer_AA_TRANS_Vevent__PaceA__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Pacer_AA_TRANS_AVI_Wait__Vevent__0_DATA =
    {
        DBGSTR("AVI_Wait__Vevent__0"),	// name
        &PM_Pacer_AA_STATE_Vevent,				// target
        &GLOBAL_CHANNEL_VAR_Vsense,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Pacer_AA_TRANS_AVI_Wait__Vevent__0 =
    {
        &PM_Pacer_AA_TRANS_AVI_Wait__Vevent__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_PM_Pacer_AA_TRANS_AVI_Wait__PaceV__0()
{
    return ((((int)SystemVariables.clk_GLOBAL_clk_aa) >= ((((int)SystemVariables.int_GLOBAL_cur_avi) + ((int)SystemVariables.int_GLOBAL_cur_avi_ext)))));
};
static void updatefunc_PM_Pacer_AA_TRANS_AVI_Wait__PaceV__0()
{
    SystemVariables.int_GLOBAL_cur_avi_ext = ((((((int)SystemVariables.int_GLOBAL_cur_avi_ext) >= ((int)SystemVariables.int_GLOBAL_Max_AVIExt))) ? (0) : ((((((((int)SystemVariables.int_GLOBAL_cur_avi_ext) + ((int)SystemVariables.int_GLOBAL_AVIExt_Step))) >= ((int)SystemVariables.int_GLOBAL_Max_AVIExt))) ? ((int)SystemVariables.int_GLOBAL_Max_AVIExt) : ((((int)SystemVariables.int_GLOBAL_cur_avi_ext) + ((int)SystemVariables.int_GLOBAL_AVIExt_Step)))))));
};
const TRANSITION_ENTRY_DATA PM_Pacer_AA_TRANS_AVI_Wait__PaceV__0_DATA =
    {
        DBGSTR("AVI_Wait__PaceV__0"),	// name
        &PM_Pacer_AA_STATE_PaceV,				// target
        NULL,				// receive
        NULL,				// send
        guardfunc_PM_Pacer_AA_TRANS_AVI_Wait__PaceV__0,               // guard
        updatefunc_PM_Pacer_AA_TRANS_AVI_Wait__PaceV__0,               // update
    };

TRANSITION_ENTRY PM_Pacer_AA_TRANS_AVI_Wait__PaceV__0 =
    {
        &PM_Pacer_AA_TRANS_AVI_Wait__PaceV__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Pacer_AA_STATE_PaceV_OUT[] = 
    {
        &PM_Pacer_AA_TRANS_PaceV__Vevent__0, // PaceV__Vevent__0
    NULL
    };

const STATE_ENTRY_DATA PM_Pacer_AA_STATE_PaceV_DATA =
    {
        DBGSTR("PaceV"),	// name
        (TRANSITION_ENTRY* const*)&PM_Pacer_AA_STATE_PaceV_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Pacer_AA_STATE_PaceV =
    {
        &PM_Pacer_AA_STATE_PaceV_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Pacer_AA_STATE_PMManualMode_OUT[] = 
    {
        &PM_Pacer_AA_TRANS_PMManualMode__AVI_Wait__0, // PMManualMode__AVI_Wait__0
    NULL
    };

const STATE_ENTRY_DATA PM_Pacer_AA_STATE_PMManualMode_DATA =
    {
        DBGSTR("PMManualMode"),	// name
        (TRANSITION_ENTRY* const*)&PM_Pacer_AA_STATE_PMManualMode_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Pacer_AA_STATE_PMManualMode =
    {
        &PM_Pacer_AA_STATE_PMManualMode_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Pacer_AA_STATE_Adone_OUT[] = 
    {
        &PM_Pacer_AA_TRANS_Adone__PMManualMode__0, // Adone__PMManualMode__0
        &PM_Pacer_AA_TRANS_Adone__AVI_Wait__0, // Adone__AVI_Wait__0
    NULL
    };

const STATE_ENTRY_DATA PM_Pacer_AA_STATE_Adone_DATA =
    {
        DBGSTR("Adone"),	// name
        (TRANSITION_ENTRY* const*)&PM_Pacer_AA_STATE_Adone_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Pacer_AA_STATE_Adone =
    {
        &PM_Pacer_AA_STATE_Adone_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

static bool guardfunc_PM_Pacer_AA_STATE_PVC()
{
    return ((((int)SystemVariables.clk_GLOBAL_clk_aa) <= ((((int)SystemVariables.int_GLOBAL_cur_lri) - ((int)SystemVariables.int_GLOBAL_cur_avi)))));
};
const TRANSITION_ENTRY* PM_Pacer_AA_STATE_PVC_OUT[] = 
    {
        &PM_Pacer_AA_TRANS_PVC__PMManualMode__0, // PVC__PMManualMode__0
        &PM_Pacer_AA_TRANS_PVC__Adone__0, // PVC__Adone__0
        &PM_Pacer_AA_TRANS_PVC__PaceA__0, // PVC__PaceA__0
    NULL
    };

const STATE_ENTRY_DATA PM_Pacer_AA_STATE_PVC_DATA =
    {
        DBGSTR("PVC"),	// name
        (TRANSITION_ENTRY* const*)&PM_Pacer_AA_STATE_PVC_OUT,	// target
        StateNormal, // mode
        guardfunc_PM_Pacer_AA_STATE_PVC, // guard
    };

STATE_ENTRY PM_Pacer_AA_STATE_PVC =
    {
        &PM_Pacer_AA_STATE_PVC_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Pacer_AA_STATE_PaceA_OUT[] = 
    {
        &PM_Pacer_AA_TRANS_PaceA__PMManualMode__0, // PaceA__PMManualMode__0
        &PM_Pacer_AA_TRANS_PaceA__Adone__0, // PaceA__Adone__0
    NULL
    };

const STATE_ENTRY_DATA PM_Pacer_AA_STATE_PaceA_DATA =
    {
        DBGSTR("PaceA"),	// name
        (TRANSITION_ENTRY* const*)&PM_Pacer_AA_STATE_PaceA_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Pacer_AA_STATE_PaceA =
    {
        &PM_Pacer_AA_STATE_PaceA_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

static bool guardfunc_PM_Pacer_AA_STATE_Vevent()
{
    return ((((int)SystemVariables.clk_GLOBAL_clk_aa) <= ((int)SystemVariables.int_GLOBAL_cur_lri)));
};
const TRANSITION_ENTRY* PM_Pacer_AA_STATE_Vevent_OUT[] = 
    {
        &PM_Pacer_AA_TRANS_Vevent__PMManualMode__0, // Vevent__PMManualMode__0
        &PM_Pacer_AA_TRANS_Vevent__Adone__0, // Vevent__Adone__0
        &PM_Pacer_AA_TRANS_Vevent__PVC__0, // Vevent__PVC__0
        &PM_Pacer_AA_TRANS_Vevent__PaceA__0, // Vevent__PaceA__0
    NULL
    };

const STATE_ENTRY_DATA PM_Pacer_AA_STATE_Vevent_DATA =
    {
        DBGSTR("Vevent"),	// name
        (TRANSITION_ENTRY* const*)&PM_Pacer_AA_STATE_Vevent_OUT,	// target
        StateNormal, // mode
        guardfunc_PM_Pacer_AA_STATE_Vevent, // guard
    };

STATE_ENTRY PM_Pacer_AA_STATE_Vevent =
    {
        &PM_Pacer_AA_STATE_Vevent_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

static bool guardfunc_PM_Pacer_AA_STATE_AVI_Wait()
{
    return ((((int)SystemVariables.clk_GLOBAL_clk_aa) <= ((((int)SystemVariables.int_GLOBAL_cur_avi) + ((int)SystemVariables.int_GLOBAL_cur_avi_ext)))));
};
const TRANSITION_ENTRY* PM_Pacer_AA_STATE_AVI_Wait_OUT[] = 
    {
        &PM_Pacer_AA_TRANS_AVI_Wait__PMManualMode__0, // AVI_Wait__PMManualMode__0
        &PM_Pacer_AA_TRANS_AVI_Wait__Vevent__0, // AVI_Wait__Vevent__0
        &PM_Pacer_AA_TRANS_AVI_Wait__PaceV__0, // AVI_Wait__PaceV__0
    NULL
    };

const STATE_ENTRY_DATA PM_Pacer_AA_STATE_AVI_Wait_DATA =
    {
        DBGSTR("AVI_Wait"),	// name
        (TRANSITION_ENTRY* const*)&PM_Pacer_AA_STATE_AVI_Wait_OUT,	// target
        StateNormal, // mode
        guardfunc_PM_Pacer_AA_STATE_AVI_Wait, // guard
    };

STATE_ENTRY PM_Pacer_AA_STATE_AVI_Wait =
    {
        &PM_Pacer_AA_STATE_AVI_Wait_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE PM_Pacer_AA_PROCESS_STATE;

PROCESS_ENTRY_THREAD PM_Pacer_AA_PROCESS_THREAD(&PM_Pacer_AA_PROCESS_STATE);

const PROCESS_ENTRY_DATA PM_Pacer_AA_PROCESS_DATA = 
    {
        DBGSTR("PM_Pacer_AA_PROCESS"),	// name
        &PM_Pacer_AA_STATE_AVI_Wait, // initState
        &PM_Pacer_AA_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY PM_Pacer_AA_PROCESS = 
    {
        &PM_Pacer_AA_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE PM_Pacer_AA_PROCESS_STATE = 
    {
        &PM_Pacer_AA_PROCESS,         // process
        &PM_Pacer_AA_PROCESS_THREAD,  // thread
        &PM_Pacer_AA_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };


// Process - PM_Leds_Apace

const TRANSITION_ENTRY_DATA PM_Leds_Apace_TRANS_On__Off__0_DATA =
    {
        DBGSTR("On__Off__0"),	// name
        &PM_Leds_Apace_STATE_Off,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Leds_Apace_TRANS_On__Off__0 =
    {
        &PM_Leds_Apace_TRANS_On__Off__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Leds_Apace_TRANS_Off__On__0_DATA =
    {
        DBGSTR("Off__On__0"),	// name
        &PM_Leds_Apace_STATE_On,				// target
        &GLOBAL_CHANNEL_VAR_Apace,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Leds_Apace_TRANS_Off__On__0 =
    {
        &PM_Leds_Apace_TRANS_Off__On__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Leds_Apace_STATE_On_OUT[] = 
    {
        &PM_Leds_Apace_TRANS_On__Off__0, // On__Off__0
    NULL
    };

const STATE_ENTRY_DATA PM_Leds_Apace_STATE_On_DATA =
    {
        DBGSTR("On"),	// name
        (TRANSITION_ENTRY* const*)&PM_Leds_Apace_STATE_On_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Leds_Apace_STATE_On =
    {
        &PM_Leds_Apace_STATE_On_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Leds_Apace_STATE_Off_OUT[] = 
    {
        &PM_Leds_Apace_TRANS_Off__On__0, // Off__On__0
    NULL
    };

const STATE_ENTRY_DATA PM_Leds_Apace_STATE_Off_DATA =
    {
        DBGSTR("Off"),	// name
        (TRANSITION_ENTRY* const*)&PM_Leds_Apace_STATE_Off_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Leds_Apace_STATE_Off =
    {
        &PM_Leds_Apace_STATE_Off_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE PM_Leds_Apace_PROCESS_STATE;

PROCESS_ENTRY_THREAD PM_Leds_Apace_PROCESS_THREAD(&PM_Leds_Apace_PROCESS_STATE);

const PROCESS_ENTRY_DATA PM_Leds_Apace_PROCESS_DATA = 
    {
        DBGSTR("PM_Leds_Apace_PROCESS"),	// name
        &PM_Leds_Apace_STATE_Off, // initState
        &PM_Leds_Apace_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY PM_Leds_Apace_PROCESS = 
    {
        &PM_Leds_Apace_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE PM_Leds_Apace_PROCESS_STATE = 
    {
        &PM_Leds_Apace_PROCESS,         // process
        &PM_Leds_Apace_PROCESS_THREAD,  // thread
        &PM_Leds_Apace_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };


// Process - PM_Leds_Asense

const TRANSITION_ENTRY_DATA PM_Leds_Asense_TRANS_On__Off__0_DATA =
    {
        DBGSTR("On__Off__0"),	// name
        &PM_Leds_Asense_STATE_Off,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Leds_Asense_TRANS_On__Off__0 =
    {
        &PM_Leds_Asense_TRANS_On__Off__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Leds_Asense_TRANS_Off__On__0_DATA =
    {
        DBGSTR("Off__On__0"),	// name
        &PM_Leds_Asense_STATE_On,				// target
        &GLOBAL_CHANNEL_VAR_Asense,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Leds_Asense_TRANS_Off__On__0 =
    {
        &PM_Leds_Asense_TRANS_Off__On__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Leds_Asense_STATE_On_OUT[] = 
    {
        &PM_Leds_Asense_TRANS_On__Off__0, // On__Off__0
    NULL
    };

const STATE_ENTRY_DATA PM_Leds_Asense_STATE_On_DATA =
    {
        DBGSTR("On"),	// name
        (TRANSITION_ENTRY* const*)&PM_Leds_Asense_STATE_On_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Leds_Asense_STATE_On =
    {
        &PM_Leds_Asense_STATE_On_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Leds_Asense_STATE_Off_OUT[] = 
    {
        &PM_Leds_Asense_TRANS_Off__On__0, // Off__On__0
    NULL
    };

const STATE_ENTRY_DATA PM_Leds_Asense_STATE_Off_DATA =
    {
        DBGSTR("Off"),	// name
        (TRANSITION_ENTRY* const*)&PM_Leds_Asense_STATE_Off_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Leds_Asense_STATE_Off =
    {
        &PM_Leds_Asense_STATE_Off_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE PM_Leds_Asense_PROCESS_STATE;

PROCESS_ENTRY_THREAD PM_Leds_Asense_PROCESS_THREAD(&PM_Leds_Asense_PROCESS_STATE);

const PROCESS_ENTRY_DATA PM_Leds_Asense_PROCESS_DATA = 
    {
        DBGSTR("PM_Leds_Asense_PROCESS"),	// name
        &PM_Leds_Asense_STATE_Off, // initState
        &PM_Leds_Asense_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY PM_Leds_Asense_PROCESS = 
    {
        &PM_Leds_Asense_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE PM_Leds_Asense_PROCESS_STATE = 
    {
        &PM_Leds_Asense_PROCESS,         // process
        &PM_Leds_Asense_PROCESS_THREAD,  // thread
        &PM_Leds_Asense_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };


// Process - PM_Leds_Vpace

const TRANSITION_ENTRY_DATA PM_Leds_Vpace_TRANS_On__Off__0_DATA =
    {
        DBGSTR("On__Off__0"),	// name
        &PM_Leds_Vpace_STATE_Off,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Leds_Vpace_TRANS_On__Off__0 =
    {
        &PM_Leds_Vpace_TRANS_On__Off__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Leds_Vpace_TRANS_Off__On__0_DATA =
    {
        DBGSTR("Off__On__0"),	// name
        &PM_Leds_Vpace_STATE_On,				// target
        &GLOBAL_CHANNEL_VAR_Vpace,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Leds_Vpace_TRANS_Off__On__0 =
    {
        &PM_Leds_Vpace_TRANS_Off__On__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Leds_Vpace_STATE_On_OUT[] = 
    {
        &PM_Leds_Vpace_TRANS_On__Off__0, // On__Off__0
    NULL
    };

const STATE_ENTRY_DATA PM_Leds_Vpace_STATE_On_DATA =
    {
        DBGSTR("On"),	// name
        (TRANSITION_ENTRY* const*)&PM_Leds_Vpace_STATE_On_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Leds_Vpace_STATE_On =
    {
        &PM_Leds_Vpace_STATE_On_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Leds_Vpace_STATE_Off_OUT[] = 
    {
        &PM_Leds_Vpace_TRANS_Off__On__0, // Off__On__0
    NULL
    };

const STATE_ENTRY_DATA PM_Leds_Vpace_STATE_Off_DATA =
    {
        DBGSTR("Off"),	// name
        (TRANSITION_ENTRY* const*)&PM_Leds_Vpace_STATE_Off_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Leds_Vpace_STATE_Off =
    {
        &PM_Leds_Vpace_STATE_Off_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE PM_Leds_Vpace_PROCESS_STATE;

PROCESS_ENTRY_THREAD PM_Leds_Vpace_PROCESS_THREAD(&PM_Leds_Vpace_PROCESS_STATE);

const PROCESS_ENTRY_DATA PM_Leds_Vpace_PROCESS_DATA = 
    {
        DBGSTR("PM_Leds_Vpace_PROCESS"),	// name
        &PM_Leds_Vpace_STATE_Off, // initState
        &PM_Leds_Vpace_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY PM_Leds_Vpace_PROCESS = 
    {
        &PM_Leds_Vpace_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE PM_Leds_Vpace_PROCESS_STATE = 
    {
        &PM_Leds_Vpace_PROCESS,         // process
        &PM_Leds_Vpace_PROCESS_THREAD,  // thread
        &PM_Leds_Vpace_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };


// Process - PM_Leds_Vsense

const TRANSITION_ENTRY_DATA PM_Leds_Vsense_TRANS_On__Off__0_DATA =
    {
        DBGSTR("On__Off__0"),	// name
        &PM_Leds_Vsense_STATE_Off,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Leds_Vsense_TRANS_On__Off__0 =
    {
        &PM_Leds_Vsense_TRANS_On__Off__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_Leds_Vsense_TRANS_Off__On__0_DATA =
    {
        DBGSTR("Off__On__0"),	// name
        &PM_Leds_Vsense_STATE_On,				// target
        &GLOBAL_CHANNEL_VAR_Vsense,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_Leds_Vsense_TRANS_Off__On__0 =
    {
        &PM_Leds_Vsense_TRANS_Off__On__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Leds_Vsense_STATE_On_OUT[] = 
    {
        &PM_Leds_Vsense_TRANS_On__Off__0, // On__Off__0
    NULL
    };

const STATE_ENTRY_DATA PM_Leds_Vsense_STATE_On_DATA =
    {
        DBGSTR("On"),	// name
        (TRANSITION_ENTRY* const*)&PM_Leds_Vsense_STATE_On_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Leds_Vsense_STATE_On =
    {
        &PM_Leds_Vsense_STATE_On_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_Leds_Vsense_STATE_Off_OUT[] = 
    {
        &PM_Leds_Vsense_TRANS_Off__On__0, // Off__On__0
    NULL
    };

const STATE_ENTRY_DATA PM_Leds_Vsense_STATE_Off_DATA =
    {
        DBGSTR("Off"),	// name
        (TRANSITION_ENTRY* const*)&PM_Leds_Vsense_STATE_Off_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_Leds_Vsense_STATE_Off =
    {
        &PM_Leds_Vsense_STATE_Off_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE PM_Leds_Vsense_PROCESS_STATE;

PROCESS_ENTRY_THREAD PM_Leds_Vsense_PROCESS_THREAD(&PM_Leds_Vsense_PROCESS_STATE);

const PROCESS_ENTRY_DATA PM_Leds_Vsense_PROCESS_DATA = 
    {
        DBGSTR("PM_Leds_Vsense_PROCESS"),	// name
        &PM_Leds_Vsense_STATE_Off, // initState
        &PM_Leds_Vsense_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY PM_Leds_Vsense_PROCESS = 
    {
        &PM_Leds_Vsense_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE PM_Leds_Vsense_PROCESS_STATE = 
    {
        &PM_Leds_Vsense_PROCESS,         // process
        &PM_Leds_Vsense_PROCESS_THREAD,  // thread
        &PM_Leds_Vsense_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };


// Process - PM_DisplayAndAlarm

static bool guardfunc_PM_DisplayAndAlarm_TRANS_ShowRate__Init__0()
{
    return ((((int)SystemVariables.int_PM_DisplayAndAlarm_aa_rate) > (((60000) / ((int)SystemVariables.int_GLOBAL_cur_uri)))));
};
const TRANSITION_ENTRY_DATA PM_DisplayAndAlarm_TRANS_ShowRate__Init__0_DATA =
    {
        DBGSTR("ShowRate__Init__0"),	// name
        &PM_DisplayAndAlarm_STATE_Init,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_AlarmH,				// send
        guardfunc_PM_DisplayAndAlarm_TRANS_ShowRate__Init__0,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_DisplayAndAlarm_TRANS_ShowRate__Init__0 =
    {
        &PM_DisplayAndAlarm_TRANS_ShowRate__Init__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_PM_DisplayAndAlarm_TRANS_ShowRate__Init__1()
{
    return ((((((int)SystemVariables.int_PM_DisplayAndAlarm_aa_rate) >= (((60000) / ((int)SystemVariables.int_GLOBAL_cur_lri))))) && ((((int)SystemVariables.int_PM_DisplayAndAlarm_aa_rate) <= (((60000) / ((int)SystemVariables.int_GLOBAL_cur_uri)))))));
};
const TRANSITION_ENTRY_DATA PM_DisplayAndAlarm_TRANS_ShowRate__Init__1_DATA =
    {
        DBGSTR("ShowRate__Init__1"),	// name
        &PM_DisplayAndAlarm_STATE_Init,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_NoAlarm,				// send
        guardfunc_PM_DisplayAndAlarm_TRANS_ShowRate__Init__1,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_DisplayAndAlarm_TRANS_ShowRate__Init__1 =
    {
        &PM_DisplayAndAlarm_TRANS_ShowRate__Init__1_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_PM_DisplayAndAlarm_TRANS_ShowRate__Init__2()
{
    return ((((int)SystemVariables.int_PM_DisplayAndAlarm_aa_rate) < (((60000) / ((int)SystemVariables.int_GLOBAL_cur_lri)))));
};
const TRANSITION_ENTRY_DATA PM_DisplayAndAlarm_TRANS_ShowRate__Init__2_DATA =
    {
        DBGSTR("ShowRate__Init__2"),	// name
        &PM_DisplayAndAlarm_STATE_Init,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_AlarmL,				// send
        guardfunc_PM_DisplayAndAlarm_TRANS_ShowRate__Init__2,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_DisplayAndAlarm_TRANS_ShowRate__Init__2 =
    {
        &PM_DisplayAndAlarm_TRANS_ShowRate__Init__2_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_DisplayAndAlarm_TRANS_ShowRate__Init__3_DATA =
    {
        DBGSTR("ShowRate__Init__3"),	// name
        &PM_DisplayAndAlarm_STATE_Init,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_DisplayAndAlarm_TRANS_ShowRate__Init__3 =
    {
        &PM_DisplayAndAlarm_TRANS_ShowRate__Init__3_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_PM_DisplayAndAlarm_TRANS_Init__ShowRate__0()
{
    return ((((int)SystemVariables.clk_PM_DisplayAndAlarm_t) >= ((int)SystemVariables.int_GLOBAL_cur_msti)));
};
static void updatefunc_PM_DisplayAndAlarm_TRANS_Init__ShowRate__0()
{
    SystemVariables.int_PM_DisplayAndAlarm_aa_rate = ((((((int)SystemVariables.int_PM_DisplayAndAlarm_aa_count) * (60000))) / ((int)SystemVariables.int_GLOBAL_cur_msti)));
    SystemVariables.int_PM_DisplayAndAlarm_aa_count = (0);
    SystemVariables.clk_PM_DisplayAndAlarm_t = (0);
};
const TRANSITION_ENTRY_DATA PM_DisplayAndAlarm_TRANS_Init__ShowRate__0_DATA =
    {
        DBGSTR("Init__ShowRate__0"),	// name
        &PM_DisplayAndAlarm_STATE_ShowRate,				// target
        NULL,				// receive
        NULL,				// send
        guardfunc_PM_DisplayAndAlarm_TRANS_Init__ShowRate__0,               // guard
        updatefunc_PM_DisplayAndAlarm_TRANS_Init__ShowRate__0,               // update
    };

TRANSITION_ENTRY PM_DisplayAndAlarm_TRANS_Init__ShowRate__0 =
    {
        &PM_DisplayAndAlarm_TRANS_Init__ShowRate__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_PM_DisplayAndAlarm_TRANS_Incr__Init__0()
{
    SystemVariables.int_PM_DisplayAndAlarm_aa_count = ((((int)SystemVariables.int_PM_DisplayAndAlarm_aa_count) + (1)));
};
const TRANSITION_ENTRY_DATA PM_DisplayAndAlarm_TRANS_Incr__Init__0_DATA =
    {
        DBGSTR("Incr__Init__0"),	// name
        &PM_DisplayAndAlarm_STATE_Init,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_PM_DisplayAndAlarm_TRANS_Incr__Init__0,               // update
    };

TRANSITION_ENTRY PM_DisplayAndAlarm_TRANS_Incr__Init__0 =
    {
        &PM_DisplayAndAlarm_TRANS_Incr__Init__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_DisplayAndAlarm_TRANS_Init__Incr__0_DATA =
    {
        DBGSTR("Init__Incr__0"),	// name
        &PM_DisplayAndAlarm_STATE_Incr,				// target
        &GLOBAL_CHANNEL_VAR_Apace,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_DisplayAndAlarm_TRANS_Init__Incr__0 =
    {
        &PM_DisplayAndAlarm_TRANS_Init__Incr__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA PM_DisplayAndAlarm_TRANS_Init__Incr__1_DATA =
    {
        DBGSTR("Init__Incr__1"),	// name
        &PM_DisplayAndAlarm_STATE_Incr,				// target
        &GLOBAL_CHANNEL_VAR_Asense,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY PM_DisplayAndAlarm_TRANS_Init__Incr__1 =
    {
        &PM_DisplayAndAlarm_TRANS_Init__Incr__1_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_DisplayAndAlarm_STATE_ShowRate_OUT[] = 
    {
        &PM_DisplayAndAlarm_TRANS_ShowRate__Init__0, // ShowRate__Init__0
        &PM_DisplayAndAlarm_TRANS_ShowRate__Init__1, // ShowRate__Init__1
        &PM_DisplayAndAlarm_TRANS_ShowRate__Init__2, // ShowRate__Init__2
        &PM_DisplayAndAlarm_TRANS_ShowRate__Init__3, // ShowRate__Init__3
    NULL
    };

const STATE_ENTRY_DATA PM_DisplayAndAlarm_STATE_ShowRate_DATA =
    {
        DBGSTR("ShowRate"),	// name
        (TRANSITION_ENTRY* const*)&PM_DisplayAndAlarm_STATE_ShowRate_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_DisplayAndAlarm_STATE_ShowRate =
    {
        &PM_DisplayAndAlarm_STATE_ShowRate_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* PM_DisplayAndAlarm_STATE_Incr_OUT[] = 
    {
        &PM_DisplayAndAlarm_TRANS_Incr__Init__0, // Incr__Init__0
    NULL
    };

const STATE_ENTRY_DATA PM_DisplayAndAlarm_STATE_Incr_DATA =
    {
        DBGSTR("Incr"),	// name
        (TRANSITION_ENTRY* const*)&PM_DisplayAndAlarm_STATE_Incr_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY PM_DisplayAndAlarm_STATE_Incr =
    {
        &PM_DisplayAndAlarm_STATE_Incr_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

static bool guardfunc_PM_DisplayAndAlarm_STATE_Init()
{
    return ((((int)SystemVariables.clk_PM_DisplayAndAlarm_t) <= ((int)SystemVariables.int_GLOBAL_cur_msti)));
};
const TRANSITION_ENTRY* PM_DisplayAndAlarm_STATE_Init_OUT[] = 
    {
        &PM_DisplayAndAlarm_TRANS_Init__ShowRate__0, // Init__ShowRate__0
        &PM_DisplayAndAlarm_TRANS_Init__Incr__0, // Init__Incr__0
        &PM_DisplayAndAlarm_TRANS_Init__Incr__1, // Init__Incr__1
    NULL
    };

const STATE_ENTRY_DATA PM_DisplayAndAlarm_STATE_Init_DATA =
    {
        DBGSTR("Init"),	// name
        (TRANSITION_ENTRY* const*)&PM_DisplayAndAlarm_STATE_Init_OUT,	// target
        StateNormal, // mode
        guardfunc_PM_DisplayAndAlarm_STATE_Init, // guard
    };

STATE_ENTRY PM_DisplayAndAlarm_STATE_Init =
    {
        &PM_DisplayAndAlarm_STATE_Init_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE PM_DisplayAndAlarm_PROCESS_STATE;

PROCESS_ENTRY_THREAD PM_DisplayAndAlarm_PROCESS_THREAD(&PM_DisplayAndAlarm_PROCESS_STATE);

const PROCESS_ENTRY_DATA PM_DisplayAndAlarm_PROCESS_DATA = 
    {
        DBGSTR("PM_DisplayAndAlarm_PROCESS"),	// name
        &PM_DisplayAndAlarm_STATE_Init, // initState
        &PM_DisplayAndAlarm_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY PM_DisplayAndAlarm_PROCESS = 
    {
        &PM_DisplayAndAlarm_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE PM_DisplayAndAlarm_PROCESS_STATE = 
    {
        &PM_DisplayAndAlarm_PROCESS,         // process
        &PM_DisplayAndAlarm_PROCESS_THREAD,  // thread
        &PM_DisplayAndAlarm_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };



} // namespace
namespace Model {
volatile PROCESS_ENTRY_STATE* PROCESS_LIST[] =
{
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
    NULL
};
}

namespace ModelImpl {
volatile PROCESS_ENTRY_STATE** PROCESS_LIST = ::Model::PROCESS_LIST;
int MAX_PROCESS_LIST = 9;
SYNCHRONIZATION_CHANNEL** ALL_CHANNELS = ::Model::ALL_CHANNELS;
}

