// THIS FILE WAS AUTO GENERATED BY model2mbed.exe DO NOT MODIFY!!!

#include "Model.h"
using namespace ModelImpl;

namespace Model {
// Channels
SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_Apace_STATE; // brodcast chan Apace

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_Apace_DATA = // brodcast chan Apace
    {
        DBGSTR("brodcast chan Apace[]"),	// name
        false,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_Apace_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_Apace = // brodcast chan Apace
    {
        &GLOBAL_CHANNEL_VAR_Apace_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_Vpace_STATE; // brodcast chan Vpace

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_Vpace_DATA = // brodcast chan Vpace
    {
        DBGSTR("brodcast chan Vpace[]"),	// name
        false,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_Vpace_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_Vpace = // brodcast chan Vpace
    {
        &GLOBAL_CHANNEL_VAR_Vpace_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_Asignal_STATE; // brodcast chan Asignal

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_Asignal_DATA = // brodcast chan Asignal
    {
        DBGSTR("brodcast chan Asignal[]"),	// name
        false,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_Asignal_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_Asignal = // brodcast chan Asignal
    {
        &GLOBAL_CHANNEL_VAR_Asignal_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_Vsignal_STATE; // brodcast chan Vsignal

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_Vsignal_DATA = // brodcast chan Vsignal
    {
        DBGSTR("brodcast chan Vsignal[]"),	// name
        false,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_Vsignal_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_Vsignal = // brodcast chan Vsignal
    {
        &GLOBAL_CHANNEL_VAR_Vsignal_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_AlarmH_STATE; // brodcast chan AlarmH

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_AlarmH_DATA = // brodcast chan AlarmH
    {
        DBGSTR("brodcast chan AlarmH[]"),	// name
        false,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_AlarmH_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_AlarmH = // brodcast chan AlarmH
    {
        &GLOBAL_CHANNEL_VAR_AlarmH_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_AlarmL_STATE; // brodcast chan AlarmL

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_AlarmL_DATA = // brodcast chan AlarmL
    {
        DBGSTR("brodcast chan AlarmL[]"),	// name
        false,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_AlarmL_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_AlarmL = // brodcast chan AlarmL
    {
        &GLOBAL_CHANNEL_VAR_AlarmL_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_NoAlarm_STATE; // brodcast chan NoAlarm

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_NoAlarm_DATA = // brodcast chan NoAlarm
    {
        DBGSTR("brodcast chan NoAlarm[]"),	// name
        false,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_NoAlarm_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_NoAlarm = // brodcast chan NoAlarm
    {
        &GLOBAL_CHANNEL_VAR_NoAlarm_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_HMmodechange_STATE; // urgent brodcast chan HMmodechange

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_HMmodechange_DATA = // urgent brodcast chan HMmodechange
    {
        DBGSTR("urgent brodcast chan HMmodechange[]"),	// name
        true,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_HMmodechange_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_HMmodechange = // urgent brodcast chan HMmodechange
    {
        &GLOBAL_CHANNEL_VAR_HMmodechange_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_testHM_random_STATE; // urgent brodcast chan testHM_random

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_testHM_random_DATA = // urgent brodcast chan testHM_random
    {
        DBGSTR("urgent brodcast chan testHM_random[]"),	// name
        true,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_testHM_random_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_testHM_random = // urgent brodcast chan testHM_random
    {
        &GLOBAL_CHANNEL_VAR_testHM_random_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_testHM_manual_STATE; // urgent brodcast chan testHM_manual

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_testHM_manual_DATA = // urgent brodcast chan testHM_manual
    {
        DBGSTR("urgent brodcast chan testHM_manual[]"),	// name
        true,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_testHM_manual_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_testHM_manual = // urgent brodcast chan testHM_manual
    {
        &GLOBAL_CHANNEL_VAR_testHM_manual_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_testHM_test_STATE; // urgent brodcast chan testHM_test

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_testHM_test_DATA = // urgent brodcast chan testHM_test
    {
        DBGSTR("urgent brodcast chan testHM_test[]"),	// name
        true,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_testHM_test_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_testHM_test = // urgent brodcast chan testHM_test
    {
        &GLOBAL_CHANNEL_VAR_testHM_test_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_testHM_gen_0_STATE; // urgent brodcast chan testHM_gen[0,1]

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_testHM_gen_0_DATA = // urgent brodcast chan testHM_gen[0,1]
    {
        DBGSTR("urgent brodcast chan testHM_gen[0,1][0]"),	// name
        true,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_testHM_gen_0_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_testHM_gen_0 = // urgent brodcast chan testHM_gen[0,1]
    {
        &GLOBAL_CHANNEL_VAR_testHM_gen_0_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };

SYNCHRONIZATION_CHANNEL_STATE GLOBAL_CHANNEL_VAR_testHM_gen_1_STATE; // urgent brodcast chan testHM_gen[0,1]

const SYNCHRONIZATION_CHANNEL_DATA GLOBAL_CHANNEL_VAR_testHM_gen_1_DATA = // urgent brodcast chan testHM_gen[0,1]
    {
        DBGSTR("urgent brodcast chan testHM_gen[0,1][1]"),	// name
        true,				// urgent
        true,				// broadcast
        &GLOBAL_CHANNEL_VAR_testHM_gen_1_STATE,              // state
    };

SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_testHM_gen_1 = // urgent brodcast chan testHM_gen[0,1]
    {
        &GLOBAL_CHANNEL_VAR_testHM_gen_1_DATA,         // data
        NULL,              // fired
        NULL,              // context
    };


ModelImpl::SYNCHRONIZATION_CHANNEL* const GLOBAL_CHANNEL_VAR_testHM_gen_ARRAY[] = 
    {
        &GLOBAL_CHANNEL_VAR_testHM_gen_0,
        &GLOBAL_CHANNEL_VAR_testHM_gen_1,
        NULL
    };


// ChannelsList
SYNCHRONIZATION_CHANNEL* ALL_CHANNELS[] = 
    {
        &GLOBAL_CHANNEL_VAR_Apace,
        &GLOBAL_CHANNEL_VAR_Vpace,
        &GLOBAL_CHANNEL_VAR_Asignal,
        &GLOBAL_CHANNEL_VAR_Vsignal,
        &GLOBAL_CHANNEL_VAR_AlarmH,
        &GLOBAL_CHANNEL_VAR_AlarmL,
        &GLOBAL_CHANNEL_VAR_NoAlarm,
        &GLOBAL_CHANNEL_VAR_HMmodechange,
        &GLOBAL_CHANNEL_VAR_testHM_random,
        &GLOBAL_CHANNEL_VAR_testHM_manual,
        &GLOBAL_CHANNEL_VAR_testHM_test,
        &GLOBAL_CHANNEL_VAR_testHM_gen_0,
        &GLOBAL_CHANNEL_VAR_testHM_gen_1,
        NULL
    };


SYSTEM_VARIABLES SystemVariables;

// Process - HM_ModeSwitch

const TRANSITION_ENTRY_DATA HM_ModeSwitch_TRANS_Unnamed0__Manual__0_DATA =
    {
        DBGSTR("Unnamed0__Manual__0"),	// name
        &HM_ModeSwitch_STATE_Manual,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_HMmodechange,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_ModeSwitch_TRANS_Unnamed0__Manual__0 =
    {
        &HM_ModeSwitch_TRANS_Unnamed0__Manual__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA HM_ModeSwitch_TRANS_Unnamed1__Init__0_DATA =
    {
        DBGSTR("Unnamed1__Init__0"),	// name
        &HM_ModeSwitch_STATE_Init,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_HMmodechange,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_ModeSwitch_TRANS_Unnamed1__Init__0 =
    {
        &HM_ModeSwitch_TRANS_Unnamed1__Init__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA HM_ModeSwitch_TRANS_Unnamed2__Manual__0_DATA =
    {
        DBGSTR("Unnamed2__Manual__0"),	// name
        &HM_ModeSwitch_STATE_Manual,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_Vsignal,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_ModeSwitch_TRANS_Unnamed2__Manual__0 =
    {
        &HM_ModeSwitch_TRANS_Unnamed2__Manual__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA HM_ModeSwitch_TRANS_Manual__Unnamed2__0_DATA =
    {
        DBGSTR("Manual__Unnamed2__0"),	// name
        &HM_ModeSwitch_STATE_Unnamed2,				// target
        GLOBAL_CHANNEL_VAR_testHM_gen_ARRAY[0],				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_ModeSwitch_TRANS_Manual__Unnamed2__0 =
    {
        &HM_ModeSwitch_TRANS_Manual__Unnamed2__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA HM_ModeSwitch_TRANS_Unnamed3__Manual__0_DATA =
    {
        DBGSTR("Unnamed3__Manual__0"),	// name
        &HM_ModeSwitch_STATE_Manual,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_Asignal,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_ModeSwitch_TRANS_Unnamed3__Manual__0 =
    {
        &HM_ModeSwitch_TRANS_Unnamed3__Manual__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA HM_ModeSwitch_TRANS_Manual__Unnamed3__0_DATA =
    {
        DBGSTR("Manual__Unnamed3__0"),	// name
        &HM_ModeSwitch_STATE_Unnamed3,				// target
        GLOBAL_CHANNEL_VAR_testHM_gen_ARRAY[1],				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_ModeSwitch_TRANS_Manual__Unnamed3__0 =
    {
        &HM_ModeSwitch_TRANS_Manual__Unnamed3__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_HM_ModeSwitch_TRANS_Manual__Unnamed1__0()
{
    SystemVariables.int_GLOBAL_heartmode = (0);
};
const TRANSITION_ENTRY_DATA HM_ModeSwitch_TRANS_Manual__Unnamed1__0_DATA =
    {
        DBGSTR("Manual__Unnamed1__0"),	// name
        &HM_ModeSwitch_STATE_Unnamed1,				// target
        &GLOBAL_CHANNEL_VAR_testHM_test,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_HM_ModeSwitch_TRANS_Manual__Unnamed1__0,               // update
    };

TRANSITION_ENTRY HM_ModeSwitch_TRANS_Manual__Unnamed1__0 =
    {
        &HM_ModeSwitch_TRANS_Manual__Unnamed1__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_HM_ModeSwitch_TRANS_Manual__Unnamed1__1()
{
    SystemVariables.int_GLOBAL_heartmode = (0);
};
const TRANSITION_ENTRY_DATA HM_ModeSwitch_TRANS_Manual__Unnamed1__1_DATA =
    {
        DBGSTR("Manual__Unnamed1__1"),	// name
        &HM_ModeSwitch_STATE_Unnamed1,				// target
        &GLOBAL_CHANNEL_VAR_testHM_random,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_HM_ModeSwitch_TRANS_Manual__Unnamed1__1,               // update
    };

TRANSITION_ENTRY HM_ModeSwitch_TRANS_Manual__Unnamed1__1 =
    {
        &HM_ModeSwitch_TRANS_Manual__Unnamed1__1_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_HM_ModeSwitch_TRANS_Init__Unnamed1__0()
{
    SystemVariables.int_GLOBAL_heartmode = (1);
};
const TRANSITION_ENTRY_DATA HM_ModeSwitch_TRANS_Init__Unnamed1__0_DATA =
    {
        DBGSTR("Init__Unnamed1__0"),	// name
        &HM_ModeSwitch_STATE_Unnamed1,				// target
        &GLOBAL_CHANNEL_VAR_testHM_test,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_HM_ModeSwitch_TRANS_Init__Unnamed1__0,               // update
    };

TRANSITION_ENTRY HM_ModeSwitch_TRANS_Init__Unnamed1__0 =
    {
        &HM_ModeSwitch_TRANS_Init__Unnamed1__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_HM_ModeSwitch_TRANS_Init__Unnamed1__1()
{
    SystemVariables.int_GLOBAL_heartmode = (0);
};
const TRANSITION_ENTRY_DATA HM_ModeSwitch_TRANS_Init__Unnamed1__1_DATA =
    {
        DBGSTR("Init__Unnamed1__1"),	// name
        &HM_ModeSwitch_STATE_Unnamed1,				// target
        &GLOBAL_CHANNEL_VAR_testHM_random,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_HM_ModeSwitch_TRANS_Init__Unnamed1__1,               // update
    };

TRANSITION_ENTRY HM_ModeSwitch_TRANS_Init__Unnamed1__1 =
    {
        &HM_ModeSwitch_TRANS_Init__Unnamed1__1_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_HM_ModeSwitch_TRANS_Init__Unnamed0__0()
{
    SystemVariables.int_GLOBAL_heartmode = (2);
};
const TRANSITION_ENTRY_DATA HM_ModeSwitch_TRANS_Init__Unnamed0__0_DATA =
    {
        DBGSTR("Init__Unnamed0__0"),	// name
        &HM_ModeSwitch_STATE_Unnamed0,				// target
        &GLOBAL_CHANNEL_VAR_testHM_manual,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_HM_ModeSwitch_TRANS_Init__Unnamed0__0,               // update
    };

TRANSITION_ENTRY HM_ModeSwitch_TRANS_Init__Unnamed0__0 =
    {
        &HM_ModeSwitch_TRANS_Init__Unnamed0__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_ModeSwitch_STATE_Unnamed0_OUT[] = 
    {
        &HM_ModeSwitch_TRANS_Unnamed0__Manual__0, // Unnamed0__Manual__0
    NULL
    };

const STATE_ENTRY_DATA HM_ModeSwitch_STATE_Unnamed0_DATA =
    {
        DBGSTR("Unnamed0"),	// name
        (TRANSITION_ENTRY* const*)&HM_ModeSwitch_STATE_Unnamed0_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_ModeSwitch_STATE_Unnamed0 =
    {
        &HM_ModeSwitch_STATE_Unnamed0_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_ModeSwitch_STATE_Unnamed1_OUT[] = 
    {
        &HM_ModeSwitch_TRANS_Unnamed1__Init__0, // Unnamed1__Init__0
    NULL
    };

const STATE_ENTRY_DATA HM_ModeSwitch_STATE_Unnamed1_DATA =
    {
        DBGSTR("Unnamed1"),	// name
        (TRANSITION_ENTRY* const*)&HM_ModeSwitch_STATE_Unnamed1_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_ModeSwitch_STATE_Unnamed1 =
    {
        &HM_ModeSwitch_STATE_Unnamed1_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_ModeSwitch_STATE_Unnamed2_OUT[] = 
    {
        &HM_ModeSwitch_TRANS_Unnamed2__Manual__0, // Unnamed2__Manual__0
    NULL
    };

const STATE_ENTRY_DATA HM_ModeSwitch_STATE_Unnamed2_DATA =
    {
        DBGSTR("Unnamed2"),	// name
        (TRANSITION_ENTRY* const*)&HM_ModeSwitch_STATE_Unnamed2_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_ModeSwitch_STATE_Unnamed2 =
    {
        &HM_ModeSwitch_STATE_Unnamed2_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_ModeSwitch_STATE_Unnamed3_OUT[] = 
    {
        &HM_ModeSwitch_TRANS_Unnamed3__Manual__0, // Unnamed3__Manual__0
    NULL
    };

const STATE_ENTRY_DATA HM_ModeSwitch_STATE_Unnamed3_DATA =
    {
        DBGSTR("Unnamed3"),	// name
        (TRANSITION_ENTRY* const*)&HM_ModeSwitch_STATE_Unnamed3_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_ModeSwitch_STATE_Unnamed3 =
    {
        &HM_ModeSwitch_STATE_Unnamed3_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_ModeSwitch_STATE_Manual_OUT[] = 
    {
        &HM_ModeSwitch_TRANS_Manual__Unnamed2__0, // Manual__Unnamed2__0
        &HM_ModeSwitch_TRANS_Manual__Unnamed3__0, // Manual__Unnamed3__0
        &HM_ModeSwitch_TRANS_Manual__Unnamed1__0, // Manual__Unnamed1__0
        &HM_ModeSwitch_TRANS_Manual__Unnamed1__1, // Manual__Unnamed1__1
    NULL
    };

const STATE_ENTRY_DATA HM_ModeSwitch_STATE_Manual_DATA =
    {
        DBGSTR("Manual"),	// name
        (TRANSITION_ENTRY* const*)&HM_ModeSwitch_STATE_Manual_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_ModeSwitch_STATE_Manual =
    {
        &HM_ModeSwitch_STATE_Manual_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_ModeSwitch_STATE_Init_OUT[] = 
    {
        &HM_ModeSwitch_TRANS_Init__Unnamed1__0, // Init__Unnamed1__0
        &HM_ModeSwitch_TRANS_Init__Unnamed1__1, // Init__Unnamed1__1
        &HM_ModeSwitch_TRANS_Init__Unnamed0__0, // Init__Unnamed0__0
    NULL
    };

const STATE_ENTRY_DATA HM_ModeSwitch_STATE_Init_DATA =
    {
        DBGSTR("Init"),	// name
        (TRANSITION_ENTRY* const*)&HM_ModeSwitch_STATE_Init_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_ModeSwitch_STATE_Init =
    {
        &HM_ModeSwitch_STATE_Init_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE HM_ModeSwitch_PROCESS_STATE;

PROCESS_ENTRY_THREAD HM_ModeSwitch_PROCESS_THREAD(&HM_ModeSwitch_PROCESS_STATE);

const PROCESS_ENTRY_DATA HM_ModeSwitch_PROCESS_DATA = 
    {
        DBGSTR("HM_ModeSwitch_PROCESS"),	// name
        &HM_ModeSwitch_STATE_Init, // initState
        &HM_ModeSwitch_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY HM_ModeSwitch_PROCESS = 
    {
        &HM_ModeSwitch_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE HM_ModeSwitch_PROCESS_STATE = 
    {
        &HM_ModeSwitch_PROCESS,         // process
        &HM_ModeSwitch_PROCESS_THREAD,  // thread
        &HM_ModeSwitch_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };


// Process - HM_Asignal

static bool guardfunc_HM_Asignal_TRANS_Disabled__RHM__0()
{
    return ((((int)SystemVariables.int_GLOBAL_heartmode) == (0)));
};
static void updatefunc_HM_Asignal_TRANS_Disabled__RHM__0()
{
    SystemVariables.clk_GLOBAL_clkheart = (0);
};
const TRANSITION_ENTRY_DATA HM_Asignal_TRANS_Disabled__RHM__0_DATA =
    {
        DBGSTR("Disabled__RHM__0"),	// name
        &HM_Asignal_STATE_RHM,				// target
        &GLOBAL_CHANNEL_VAR_HMmodechange,				// receive
        NULL,				// send
        guardfunc_HM_Asignal_TRANS_Disabled__RHM__0,               // guard
        updatefunc_HM_Asignal_TRANS_Disabled__RHM__0,               // update
    };

TRANSITION_ENTRY HM_Asignal_TRANS_Disabled__RHM__0 =
    {
        &HM_Asignal_TRANS_Disabled__RHM__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_HM_Asignal_TRANS_RHM__Disabled__0()
{
    return ((((int)SystemVariables.int_GLOBAL_heartmode) != (0)));
};
const TRANSITION_ENTRY_DATA HM_Asignal_TRANS_RHM__Disabled__0_DATA =
    {
        DBGSTR("RHM__Disabled__0"),	// name
        &HM_Asignal_STATE_Disabled,				// target
        &GLOBAL_CHANNEL_VAR_HMmodechange,				// receive
        NULL,				// send
        guardfunc_HM_Asignal_TRANS_RHM__Disabled__0,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_Asignal_TRANS_RHM__Disabled__0 =
    {
        &HM_Asignal_TRANS_RHM__Disabled__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_HM_Asignal_TRANS_RHM__RHM__0()
{
    return ((((int)SystemVariables.clk_GLOBAL_clkheart) >= ((int)SystemVariables.int_GLOBAL_A_minwait)));
};
static void updatefunc_HM_Asignal_TRANS_RHM__RHM__0()
{
    SystemVariables.clk_GLOBAL_clkheart = (0);
};
const TRANSITION_ENTRY_DATA HM_Asignal_TRANS_RHM__RHM__0_DATA =
    {
        DBGSTR("RHM__RHM__0"),	// name
        &HM_Asignal_STATE_RHM,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_Asignal,				// send
        guardfunc_HM_Asignal_TRANS_RHM__RHM__0,               // guard
        updatefunc_HM_Asignal_TRANS_RHM__RHM__0,               // update
    };

TRANSITION_ENTRY HM_Asignal_TRANS_RHM__RHM__0 =
    {
        &HM_Asignal_TRANS_RHM__RHM__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_Asignal_STATE_Disabled_OUT[] = 
    {
        &HM_Asignal_TRANS_Disabled__RHM__0, // Disabled__RHM__0
    NULL
    };

const STATE_ENTRY_DATA HM_Asignal_STATE_Disabled_DATA =
    {
        DBGSTR("Disabled"),	// name
        (TRANSITION_ENTRY* const*)&HM_Asignal_STATE_Disabled_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_Asignal_STATE_Disabled =
    {
        &HM_Asignal_STATE_Disabled_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

static bool guardfunc_HM_Asignal_STATE_RHM()
{
    return ((((int)SystemVariables.clk_GLOBAL_clkheart) <= ((int)SystemVariables.int_GLOBAL_A_maxwait)));
};
const TRANSITION_ENTRY* HM_Asignal_STATE_RHM_OUT[] = 
    {
        &HM_Asignal_TRANS_RHM__Disabled__0, // RHM__Disabled__0
        &HM_Asignal_TRANS_RHM__RHM__0, // RHM__RHM__0
    NULL
    };

const STATE_ENTRY_DATA HM_Asignal_STATE_RHM_DATA =
    {
        DBGSTR("RHM"),	// name
        (TRANSITION_ENTRY* const*)&HM_Asignal_STATE_RHM_OUT,	// target
        StateNormal, // mode
        guardfunc_HM_Asignal_STATE_RHM, // guard
    };

STATE_ENTRY HM_Asignal_STATE_RHM =
    {
        &HM_Asignal_STATE_RHM_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE HM_Asignal_PROCESS_STATE;

PROCESS_ENTRY_THREAD HM_Asignal_PROCESS_THREAD(&HM_Asignal_PROCESS_STATE);

const PROCESS_ENTRY_DATA HM_Asignal_PROCESS_DATA = 
    {
        DBGSTR("HM_Asignal_PROCESS"),	// name
        &HM_Asignal_STATE_RHM, // initState
        &HM_Asignal_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY HM_Asignal_PROCESS = 
    {
        &HM_Asignal_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE HM_Asignal_PROCESS_STATE = 
    {
        &HM_Asignal_PROCESS,         // process
        &HM_Asignal_PROCESS_THREAD,  // thread
        &HM_Asignal_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };


// Process - HM_Apace

static void updatefunc_HM_Apace_TRANS_AIdle__AIdle__0()
{
    SystemVariables.clk_GLOBAL_clkheart = (0);
};
const TRANSITION_ENTRY_DATA HM_Apace_TRANS_AIdle__AIdle__0_DATA =
    {
        DBGSTR("AIdle__AIdle__0"),	// name
        &HM_Apace_STATE_AIdle,				// target
        &GLOBAL_CHANNEL_VAR_Apace,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_HM_Apace_TRANS_AIdle__AIdle__0,               // update
    };

TRANSITION_ENTRY HM_Apace_TRANS_AIdle__AIdle__0 =
    {
        &HM_Apace_TRANS_AIdle__AIdle__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_Apace_STATE_AIdle_OUT[] = 
    {
        &HM_Apace_TRANS_AIdle__AIdle__0, // AIdle__AIdle__0
    NULL
    };

const STATE_ENTRY_DATA HM_Apace_STATE_AIdle_DATA =
    {
        DBGSTR("AIdle"),	// name
        (TRANSITION_ENTRY* const*)&HM_Apace_STATE_AIdle_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_Apace_STATE_AIdle =
    {
        &HM_Apace_STATE_AIdle_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE HM_Apace_PROCESS_STATE;

PROCESS_ENTRY_THREAD HM_Apace_PROCESS_THREAD(&HM_Apace_PROCESS_STATE);

const PROCESS_ENTRY_DATA HM_Apace_PROCESS_DATA = 
    {
        DBGSTR("HM_Apace_PROCESS"),	// name
        &HM_Apace_STATE_AIdle, // initState
        &HM_Apace_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY HM_Apace_PROCESS = 
    {
        &HM_Apace_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE HM_Apace_PROCESS_STATE = 
    {
        &HM_Apace_PROCESS,         // process
        &HM_Apace_PROCESS_THREAD,  // thread
        &HM_Apace_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };


// Process - HM_Vsignal

static bool guardfunc_HM_Vsignal_TRANS_RHM__Disabled__0()
{
    return ((((int)SystemVariables.int_GLOBAL_heartmode) != (0)));
};
const TRANSITION_ENTRY_DATA HM_Vsignal_TRANS_RHM__Disabled__0_DATA =
    {
        DBGSTR("RHM__Disabled__0"),	// name
        &HM_Vsignal_STATE_Disabled,				// target
        &GLOBAL_CHANNEL_VAR_HMmodechange,				// receive
        NULL,				// send
        guardfunc_HM_Vsignal_TRANS_RHM__Disabled__0,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_Vsignal_TRANS_RHM__Disabled__0 =
    {
        &HM_Vsignal_TRANS_RHM__Disabled__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_HM_Vsignal_TRANS_Disabled__RHM__0()
{
    return ((((int)SystemVariables.int_GLOBAL_heartmode) == (0)));
};
static void updatefunc_HM_Vsignal_TRANS_Disabled__RHM__0()
{
    SystemVariables.clk_GLOBAL_clkheart = (0);
};
const TRANSITION_ENTRY_DATA HM_Vsignal_TRANS_Disabled__RHM__0_DATA =
    {
        DBGSTR("Disabled__RHM__0"),	// name
        &HM_Vsignal_STATE_RHM,				// target
        &GLOBAL_CHANNEL_VAR_HMmodechange,				// receive
        NULL,				// send
        guardfunc_HM_Vsignal_TRANS_Disabled__RHM__0,               // guard
        updatefunc_HM_Vsignal_TRANS_Disabled__RHM__0,               // update
    };

TRANSITION_ENTRY HM_Vsignal_TRANS_Disabled__RHM__0 =
    {
        &HM_Vsignal_TRANS_Disabled__RHM__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_HM_Vsignal_TRANS_RHM__RHM__0()
{
    return ((((int)SystemVariables.clk_GLOBAL_clkheart) >= ((int)SystemVariables.int_GLOBAL_V_minwait)));
};
static void updatefunc_HM_Vsignal_TRANS_RHM__RHM__0()
{
    SystemVariables.clk_GLOBAL_clkheart = (0);
};
const TRANSITION_ENTRY_DATA HM_Vsignal_TRANS_RHM__RHM__0_DATA =
    {
        DBGSTR("RHM__RHM__0"),	// name
        &HM_Vsignal_STATE_RHM,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_Vsignal,				// send
        guardfunc_HM_Vsignal_TRANS_RHM__RHM__0,               // guard
        updatefunc_HM_Vsignal_TRANS_RHM__RHM__0,               // update
    };

TRANSITION_ENTRY HM_Vsignal_TRANS_RHM__RHM__0 =
    {
        &HM_Vsignal_TRANS_RHM__RHM__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_Vsignal_STATE_Disabled_OUT[] = 
    {
        &HM_Vsignal_TRANS_Disabled__RHM__0, // Disabled__RHM__0
    NULL
    };

const STATE_ENTRY_DATA HM_Vsignal_STATE_Disabled_DATA =
    {
        DBGSTR("Disabled"),	// name
        (TRANSITION_ENTRY* const*)&HM_Vsignal_STATE_Disabled_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_Vsignal_STATE_Disabled =
    {
        &HM_Vsignal_STATE_Disabled_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

static bool guardfunc_HM_Vsignal_STATE_RHM()
{
    return ((((int)SystemVariables.clk_GLOBAL_clkheart) <= ((int)SystemVariables.int_GLOBAL_V_maxwait)));
};
const TRANSITION_ENTRY* HM_Vsignal_STATE_RHM_OUT[] = 
    {
        &HM_Vsignal_TRANS_RHM__Disabled__0, // RHM__Disabled__0
        &HM_Vsignal_TRANS_RHM__RHM__0, // RHM__RHM__0
    NULL
    };

const STATE_ENTRY_DATA HM_Vsignal_STATE_RHM_DATA =
    {
        DBGSTR("RHM"),	// name
        (TRANSITION_ENTRY* const*)&HM_Vsignal_STATE_RHM_OUT,	// target
        StateNormal, // mode
        guardfunc_HM_Vsignal_STATE_RHM, // guard
    };

STATE_ENTRY HM_Vsignal_STATE_RHM =
    {
        &HM_Vsignal_STATE_RHM_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE HM_Vsignal_PROCESS_STATE;

PROCESS_ENTRY_THREAD HM_Vsignal_PROCESS_THREAD(&HM_Vsignal_PROCESS_STATE);

const PROCESS_ENTRY_DATA HM_Vsignal_PROCESS_DATA = 
    {
        DBGSTR("HM_Vsignal_PROCESS"),	// name
        &HM_Vsignal_STATE_RHM, // initState
        &HM_Vsignal_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY HM_Vsignal_PROCESS = 
    {
        &HM_Vsignal_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE HM_Vsignal_PROCESS_STATE = 
    {
        &HM_Vsignal_PROCESS,         // process
        &HM_Vsignal_PROCESS_THREAD,  // thread
        &HM_Vsignal_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };


// Process - HM_Vpace

static void updatefunc_HM_Vpace_TRANS_VIdle__VIdle__0()
{
    SystemVariables.clk_GLOBAL_clkheart = (0);
};
const TRANSITION_ENTRY_DATA HM_Vpace_TRANS_VIdle__VIdle__0_DATA =
    {
        DBGSTR("VIdle__VIdle__0"),	// name
        &HM_Vpace_STATE_VIdle,				// target
        &GLOBAL_CHANNEL_VAR_Vpace,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_HM_Vpace_TRANS_VIdle__VIdle__0,               // update
    };

TRANSITION_ENTRY HM_Vpace_TRANS_VIdle__VIdle__0 =
    {
        &HM_Vpace_TRANS_VIdle__VIdle__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_Vpace_STATE_VIdle_OUT[] = 
    {
        &HM_Vpace_TRANS_VIdle__VIdle__0, // VIdle__VIdle__0
    NULL
    };

const STATE_ENTRY_DATA HM_Vpace_STATE_VIdle_DATA =
    {
        DBGSTR("VIdle"),	// name
        (TRANSITION_ENTRY* const*)&HM_Vpace_STATE_VIdle_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_Vpace_STATE_VIdle =
    {
        &HM_Vpace_STATE_VIdle_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE HM_Vpace_PROCESS_STATE;

PROCESS_ENTRY_THREAD HM_Vpace_PROCESS_THREAD(&HM_Vpace_PROCESS_STATE);

const PROCESS_ENTRY_DATA HM_Vpace_PROCESS_DATA = 
    {
        DBGSTR("HM_Vpace_PROCESS"),	// name
        &HM_Vpace_STATE_VIdle, // initState
        &HM_Vpace_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY HM_Vpace_PROCESS = 
    {
        &HM_Vpace_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE HM_Vpace_PROCESS_STATE = 
    {
        &HM_Vpace_PROCESS,         // process
        &HM_Vpace_PROCESS_THREAD,  // thread
        &HM_Vpace_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };


// Process - HM_Leds_Apace

const TRANSITION_ENTRY_DATA HM_Leds_Apace_TRANS_On__Off__0_DATA =
    {
        DBGSTR("On__Off__0"),	// name
        &HM_Leds_Apace_STATE_Off,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_Leds_Apace_TRANS_On__Off__0 =
    {
        &HM_Leds_Apace_TRANS_On__Off__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA HM_Leds_Apace_TRANS_Off__On__0_DATA =
    {
        DBGSTR("Off__On__0"),	// name
        &HM_Leds_Apace_STATE_On,				// target
        &GLOBAL_CHANNEL_VAR_Apace,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_Leds_Apace_TRANS_Off__On__0 =
    {
        &HM_Leds_Apace_TRANS_Off__On__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_Leds_Apace_STATE_On_OUT[] = 
    {
        &HM_Leds_Apace_TRANS_On__Off__0, // On__Off__0
    NULL
    };

const STATE_ENTRY_DATA HM_Leds_Apace_STATE_On_DATA =
    {
        DBGSTR("On"),	// name
        (TRANSITION_ENTRY* const*)&HM_Leds_Apace_STATE_On_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_Leds_Apace_STATE_On =
    {
        &HM_Leds_Apace_STATE_On_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_Leds_Apace_STATE_Off_OUT[] = 
    {
        &HM_Leds_Apace_TRANS_Off__On__0, // Off__On__0
    NULL
    };

const STATE_ENTRY_DATA HM_Leds_Apace_STATE_Off_DATA =
    {
        DBGSTR("Off"),	// name
        (TRANSITION_ENTRY* const*)&HM_Leds_Apace_STATE_Off_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_Leds_Apace_STATE_Off =
    {
        &HM_Leds_Apace_STATE_Off_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE HM_Leds_Apace_PROCESS_STATE;

PROCESS_ENTRY_THREAD HM_Leds_Apace_PROCESS_THREAD(&HM_Leds_Apace_PROCESS_STATE);

const PROCESS_ENTRY_DATA HM_Leds_Apace_PROCESS_DATA = 
    {
        DBGSTR("HM_Leds_Apace_PROCESS"),	// name
        &HM_Leds_Apace_STATE_Off, // initState
        &HM_Leds_Apace_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY HM_Leds_Apace_PROCESS = 
    {
        &HM_Leds_Apace_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE HM_Leds_Apace_PROCESS_STATE = 
    {
        &HM_Leds_Apace_PROCESS,         // process
        &HM_Leds_Apace_PROCESS_THREAD,  // thread
        &HM_Leds_Apace_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };


// Process - HM_Leds_Asignal

const TRANSITION_ENTRY_DATA HM_Leds_Asignal_TRANS_On__Off__0_DATA =
    {
        DBGSTR("On__Off__0"),	// name
        &HM_Leds_Asignal_STATE_Off,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_Leds_Asignal_TRANS_On__Off__0 =
    {
        &HM_Leds_Asignal_TRANS_On__Off__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA HM_Leds_Asignal_TRANS_Off__On__0_DATA =
    {
        DBGSTR("Off__On__0"),	// name
        &HM_Leds_Asignal_STATE_On,				// target
        &GLOBAL_CHANNEL_VAR_Asignal,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_Leds_Asignal_TRANS_Off__On__0 =
    {
        &HM_Leds_Asignal_TRANS_Off__On__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_Leds_Asignal_STATE_On_OUT[] = 
    {
        &HM_Leds_Asignal_TRANS_On__Off__0, // On__Off__0
    NULL
    };

const STATE_ENTRY_DATA HM_Leds_Asignal_STATE_On_DATA =
    {
        DBGSTR("On"),	// name
        (TRANSITION_ENTRY* const*)&HM_Leds_Asignal_STATE_On_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_Leds_Asignal_STATE_On =
    {
        &HM_Leds_Asignal_STATE_On_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_Leds_Asignal_STATE_Off_OUT[] = 
    {
        &HM_Leds_Asignal_TRANS_Off__On__0, // Off__On__0
    NULL
    };

const STATE_ENTRY_DATA HM_Leds_Asignal_STATE_Off_DATA =
    {
        DBGSTR("Off"),	// name
        (TRANSITION_ENTRY* const*)&HM_Leds_Asignal_STATE_Off_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_Leds_Asignal_STATE_Off =
    {
        &HM_Leds_Asignal_STATE_Off_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE HM_Leds_Asignal_PROCESS_STATE;

PROCESS_ENTRY_THREAD HM_Leds_Asignal_PROCESS_THREAD(&HM_Leds_Asignal_PROCESS_STATE);

const PROCESS_ENTRY_DATA HM_Leds_Asignal_PROCESS_DATA = 
    {
        DBGSTR("HM_Leds_Asignal_PROCESS"),	// name
        &HM_Leds_Asignal_STATE_Off, // initState
        &HM_Leds_Asignal_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY HM_Leds_Asignal_PROCESS = 
    {
        &HM_Leds_Asignal_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE HM_Leds_Asignal_PROCESS_STATE = 
    {
        &HM_Leds_Asignal_PROCESS,         // process
        &HM_Leds_Asignal_PROCESS_THREAD,  // thread
        &HM_Leds_Asignal_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };


// Process - HM_Leds_Vpace

const TRANSITION_ENTRY_DATA HM_Leds_Vpace_TRANS_On__Off__0_DATA =
    {
        DBGSTR("On__Off__0"),	// name
        &HM_Leds_Vpace_STATE_Off,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_Leds_Vpace_TRANS_On__Off__0 =
    {
        &HM_Leds_Vpace_TRANS_On__Off__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA HM_Leds_Vpace_TRANS_Off__On__0_DATA =
    {
        DBGSTR("Off__On__0"),	// name
        &HM_Leds_Vpace_STATE_On,				// target
        &GLOBAL_CHANNEL_VAR_Vpace,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_Leds_Vpace_TRANS_Off__On__0 =
    {
        &HM_Leds_Vpace_TRANS_Off__On__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_Leds_Vpace_STATE_On_OUT[] = 
    {
        &HM_Leds_Vpace_TRANS_On__Off__0, // On__Off__0
    NULL
    };

const STATE_ENTRY_DATA HM_Leds_Vpace_STATE_On_DATA =
    {
        DBGSTR("On"),	// name
        (TRANSITION_ENTRY* const*)&HM_Leds_Vpace_STATE_On_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_Leds_Vpace_STATE_On =
    {
        &HM_Leds_Vpace_STATE_On_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_Leds_Vpace_STATE_Off_OUT[] = 
    {
        &HM_Leds_Vpace_TRANS_Off__On__0, // Off__On__0
    NULL
    };

const STATE_ENTRY_DATA HM_Leds_Vpace_STATE_Off_DATA =
    {
        DBGSTR("Off"),	// name
        (TRANSITION_ENTRY* const*)&HM_Leds_Vpace_STATE_Off_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_Leds_Vpace_STATE_Off =
    {
        &HM_Leds_Vpace_STATE_Off_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE HM_Leds_Vpace_PROCESS_STATE;

PROCESS_ENTRY_THREAD HM_Leds_Vpace_PROCESS_THREAD(&HM_Leds_Vpace_PROCESS_STATE);

const PROCESS_ENTRY_DATA HM_Leds_Vpace_PROCESS_DATA = 
    {
        DBGSTR("HM_Leds_Vpace_PROCESS"),	// name
        &HM_Leds_Vpace_STATE_Off, // initState
        &HM_Leds_Vpace_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY HM_Leds_Vpace_PROCESS = 
    {
        &HM_Leds_Vpace_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE HM_Leds_Vpace_PROCESS_STATE = 
    {
        &HM_Leds_Vpace_PROCESS,         // process
        &HM_Leds_Vpace_PROCESS_THREAD,  // thread
        &HM_Leds_Vpace_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };


// Process - HM_Leds_Vsignal

const TRANSITION_ENTRY_DATA HM_Leds_Vsignal_TRANS_On__Off__0_DATA =
    {
        DBGSTR("On__Off__0"),	// name
        &HM_Leds_Vsignal_STATE_Off,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_Leds_Vsignal_TRANS_On__Off__0 =
    {
        &HM_Leds_Vsignal_TRANS_On__Off__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA HM_Leds_Vsignal_TRANS_Off__On__0_DATA =
    {
        DBGSTR("Off__On__0"),	// name
        &HM_Leds_Vsignal_STATE_On,				// target
        &GLOBAL_CHANNEL_VAR_Vsignal,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_Leds_Vsignal_TRANS_Off__On__0 =
    {
        &HM_Leds_Vsignal_TRANS_Off__On__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_Leds_Vsignal_STATE_On_OUT[] = 
    {
        &HM_Leds_Vsignal_TRANS_On__Off__0, // On__Off__0
    NULL
    };

const STATE_ENTRY_DATA HM_Leds_Vsignal_STATE_On_DATA =
    {
        DBGSTR("On"),	// name
        (TRANSITION_ENTRY* const*)&HM_Leds_Vsignal_STATE_On_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_Leds_Vsignal_STATE_On =
    {
        &HM_Leds_Vsignal_STATE_On_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_Leds_Vsignal_STATE_Off_OUT[] = 
    {
        &HM_Leds_Vsignal_TRANS_Off__On__0, // Off__On__0
    NULL
    };

const STATE_ENTRY_DATA HM_Leds_Vsignal_STATE_Off_DATA =
    {
        DBGSTR("Off"),	// name
        (TRANSITION_ENTRY* const*)&HM_Leds_Vsignal_STATE_Off_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_Leds_Vsignal_STATE_Off =
    {
        &HM_Leds_Vsignal_STATE_Off_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE HM_Leds_Vsignal_PROCESS_STATE;

PROCESS_ENTRY_THREAD HM_Leds_Vsignal_PROCESS_THREAD(&HM_Leds_Vsignal_PROCESS_STATE);

const PROCESS_ENTRY_DATA HM_Leds_Vsignal_PROCESS_DATA = 
    {
        DBGSTR("HM_Leds_Vsignal_PROCESS"),	// name
        &HM_Leds_Vsignal_STATE_Off, // initState
        &HM_Leds_Vsignal_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY HM_Leds_Vsignal_PROCESS = 
    {
        &HM_Leds_Vsignal_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE HM_Leds_Vsignal_PROCESS_STATE = 
    {
        &HM_Leds_Vsignal_PROCESS,         // process
        &HM_Leds_Vsignal_PROCESS_THREAD,  // thread
        &HM_Leds_Vsignal_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };


// Process - HM_DisplayAndAlarm

static bool guardfunc_HM_DisplayAndAlarm_TRANS_ShowRate__Init__0()
{
    return ((((int)SystemVariables.int_HM_DisplayAndAlarm_aa_rate) > (((60000) / ((int)SystemVariables.int_GLOBAL_cur_uri)))));
};
const TRANSITION_ENTRY_DATA HM_DisplayAndAlarm_TRANS_ShowRate__Init__0_DATA =
    {
        DBGSTR("ShowRate__Init__0"),	// name
        &HM_DisplayAndAlarm_STATE_Init,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_AlarmH,				// send
        guardfunc_HM_DisplayAndAlarm_TRANS_ShowRate__Init__0,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_DisplayAndAlarm_TRANS_ShowRate__Init__0 =
    {
        &HM_DisplayAndAlarm_TRANS_ShowRate__Init__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_HM_DisplayAndAlarm_TRANS_ShowRate__Init__1()
{
    return ((((((int)SystemVariables.int_HM_DisplayAndAlarm_aa_rate) >= (((60000) / ((int)SystemVariables.int_GLOBAL_cur_lri))))) && ((((int)SystemVariables.int_HM_DisplayAndAlarm_aa_rate) <= (((60000) / ((int)SystemVariables.int_GLOBAL_cur_uri)))))));
};
const TRANSITION_ENTRY_DATA HM_DisplayAndAlarm_TRANS_ShowRate__Init__1_DATA =
    {
        DBGSTR("ShowRate__Init__1"),	// name
        &HM_DisplayAndAlarm_STATE_Init,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_NoAlarm,				// send
        guardfunc_HM_DisplayAndAlarm_TRANS_ShowRate__Init__1,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_DisplayAndAlarm_TRANS_ShowRate__Init__1 =
    {
        &HM_DisplayAndAlarm_TRANS_ShowRate__Init__1_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_HM_DisplayAndAlarm_TRANS_ShowRate__Init__2()
{
    return ((((int)SystemVariables.int_HM_DisplayAndAlarm_aa_rate) < (((60000) / ((int)SystemVariables.int_GLOBAL_cur_lri)))));
};
const TRANSITION_ENTRY_DATA HM_DisplayAndAlarm_TRANS_ShowRate__Init__2_DATA =
    {
        DBGSTR("ShowRate__Init__2"),	// name
        &HM_DisplayAndAlarm_STATE_Init,				// target
        NULL,				// receive
        &GLOBAL_CHANNEL_VAR_AlarmL,				// send
        guardfunc_HM_DisplayAndAlarm_TRANS_ShowRate__Init__2,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_DisplayAndAlarm_TRANS_ShowRate__Init__2 =
    {
        &HM_DisplayAndAlarm_TRANS_ShowRate__Init__2_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA HM_DisplayAndAlarm_TRANS_ShowRate__Init__3_DATA =
    {
        DBGSTR("ShowRate__Init__3"),	// name
        &HM_DisplayAndAlarm_STATE_Init,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_DisplayAndAlarm_TRANS_ShowRate__Init__3 =
    {
        &HM_DisplayAndAlarm_TRANS_ShowRate__Init__3_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static bool guardfunc_HM_DisplayAndAlarm_TRANS_Init__ShowRate__0()
{
    return ((((int)SystemVariables.clk_HM_DisplayAndAlarm_t) >= ((int)SystemVariables.int_GLOBAL_cur_msti)));
};
static void updatefunc_HM_DisplayAndAlarm_TRANS_Init__ShowRate__0()
{
    SystemVariables.int_HM_DisplayAndAlarm_aa_rate = ((((((int)SystemVariables.int_HM_DisplayAndAlarm_aa_count) * (60000))) / ((int)SystemVariables.int_GLOBAL_cur_msti)));
    SystemVariables.int_HM_DisplayAndAlarm_aa_count = (0);
    SystemVariables.clk_HM_DisplayAndAlarm_t = (0);
};
const TRANSITION_ENTRY_DATA HM_DisplayAndAlarm_TRANS_Init__ShowRate__0_DATA =
    {
        DBGSTR("Init__ShowRate__0"),	// name
        &HM_DisplayAndAlarm_STATE_ShowRate,				// target
        NULL,				// receive
        NULL,				// send
        guardfunc_HM_DisplayAndAlarm_TRANS_Init__ShowRate__0,               // guard
        updatefunc_HM_DisplayAndAlarm_TRANS_Init__ShowRate__0,               // update
    };

TRANSITION_ENTRY HM_DisplayAndAlarm_TRANS_Init__ShowRate__0 =
    {
        &HM_DisplayAndAlarm_TRANS_Init__ShowRate__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

static void updatefunc_HM_DisplayAndAlarm_TRANS_Incr__Init__0()
{
    SystemVariables.int_HM_DisplayAndAlarm_aa_count = ((((int)SystemVariables.int_HM_DisplayAndAlarm_aa_count) + (1)));
};
const TRANSITION_ENTRY_DATA HM_DisplayAndAlarm_TRANS_Incr__Init__0_DATA =
    {
        DBGSTR("Incr__Init__0"),	// name
        &HM_DisplayAndAlarm_STATE_Init,				// target
        NULL,				// receive
        NULL,				// send
        NULL,               // guard
        updatefunc_HM_DisplayAndAlarm_TRANS_Incr__Init__0,               // update
    };

TRANSITION_ENTRY HM_DisplayAndAlarm_TRANS_Incr__Init__0 =
    {
        &HM_DisplayAndAlarm_TRANS_Incr__Init__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA HM_DisplayAndAlarm_TRANS_Init__Incr__0_DATA =
    {
        DBGSTR("Init__Incr__0"),	// name
        &HM_DisplayAndAlarm_STATE_Incr,				// target
        &GLOBAL_CHANNEL_VAR_Apace,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_DisplayAndAlarm_TRANS_Init__Incr__0 =
    {
        &HM_DisplayAndAlarm_TRANS_Init__Incr__0_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY_DATA HM_DisplayAndAlarm_TRANS_Init__Incr__1_DATA =
    {
        DBGSTR("Init__Incr__1"),	// name
        &HM_DisplayAndAlarm_STATE_Incr,				// target
        &GLOBAL_CHANNEL_VAR_Asignal,				// receive
        NULL,				// send
        NULL,               // guard
        NULL,               // update
    };

TRANSITION_ENTRY HM_DisplayAndAlarm_TRANS_Init__Incr__1 =
    {
        &HM_DisplayAndAlarm_TRANS_Init__Incr__1_DATA,         // data
        NULL,              // transition_pre_execute
        NULL,              // transition_post_execute
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_DisplayAndAlarm_STATE_ShowRate_OUT[] = 
    {
        &HM_DisplayAndAlarm_TRANS_ShowRate__Init__0, // ShowRate__Init__0
        &HM_DisplayAndAlarm_TRANS_ShowRate__Init__1, // ShowRate__Init__1
        &HM_DisplayAndAlarm_TRANS_ShowRate__Init__2, // ShowRate__Init__2
        &HM_DisplayAndAlarm_TRANS_ShowRate__Init__3, // ShowRate__Init__3
    NULL
    };

const STATE_ENTRY_DATA HM_DisplayAndAlarm_STATE_ShowRate_DATA =
    {
        DBGSTR("ShowRate"),	// name
        (TRANSITION_ENTRY* const*)&HM_DisplayAndAlarm_STATE_ShowRate_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_DisplayAndAlarm_STATE_ShowRate =
    {
        &HM_DisplayAndAlarm_STATE_ShowRate_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

const TRANSITION_ENTRY* HM_DisplayAndAlarm_STATE_Incr_OUT[] = 
    {
        &HM_DisplayAndAlarm_TRANS_Incr__Init__0, // Incr__Init__0
    NULL
    };

const STATE_ENTRY_DATA HM_DisplayAndAlarm_STATE_Incr_DATA =
    {
        DBGSTR("Incr"),	// name
        (TRANSITION_ENTRY* const*)&HM_DisplayAndAlarm_STATE_Incr_OUT,	// target
        StateNormal, // mode
        NULL, // guard
    };

STATE_ENTRY HM_DisplayAndAlarm_STATE_Incr =
    {
        &HM_DisplayAndAlarm_STATE_Incr_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

static bool guardfunc_HM_DisplayAndAlarm_STATE_Init()
{
    return ((((int)SystemVariables.clk_HM_DisplayAndAlarm_t) <= ((int)SystemVariables.int_GLOBAL_cur_msti)));
};
const TRANSITION_ENTRY* HM_DisplayAndAlarm_STATE_Init_OUT[] = 
    {
        &HM_DisplayAndAlarm_TRANS_Init__ShowRate__0, // Init__ShowRate__0
        &HM_DisplayAndAlarm_TRANS_Init__Incr__0, // Init__Incr__0
        &HM_DisplayAndAlarm_TRANS_Init__Incr__1, // Init__Incr__1
    NULL
    };

const STATE_ENTRY_DATA HM_DisplayAndAlarm_STATE_Init_DATA =
    {
        DBGSTR("Init"),	// name
        (TRANSITION_ENTRY* const*)&HM_DisplayAndAlarm_STATE_Init_OUT,	// target
        StateNormal, // mode
        guardfunc_HM_DisplayAndAlarm_STATE_Init, // guard
    };

STATE_ENTRY HM_DisplayAndAlarm_STATE_Init =
    {
        &HM_DisplayAndAlarm_STATE_Init_DATA,         // data
        NULL,              // state_enter
        NULL,              // state_leave
        NULL,              // context
    };

extern PROCESS_ENTRY_STATE HM_DisplayAndAlarm_PROCESS_STATE;

PROCESS_ENTRY_THREAD HM_DisplayAndAlarm_PROCESS_THREAD(&HM_DisplayAndAlarm_PROCESS_STATE);

const PROCESS_ENTRY_DATA HM_DisplayAndAlarm_PROCESS_DATA = 
    {
        DBGSTR("HM_DisplayAndAlarm_PROCESS"),	// name
        &HM_DisplayAndAlarm_STATE_Init, // initState
        &HM_DisplayAndAlarm_PROCESS_THREAD, // threadptr
    };

PROCESS_ENTRY HM_DisplayAndAlarm_PROCESS = 
    {
        &HM_DisplayAndAlarm_PROCESS_DATA,         // data
        NULL,              // process_start
        NULL,              // context
    };

PROCESS_ENTRY_STATE HM_DisplayAndAlarm_PROCESS_STATE = 
    {
        &HM_DisplayAndAlarm_PROCESS,         // process
        &HM_DisplayAndAlarm_PROCESS_THREAD,  // thread
        &HM_DisplayAndAlarm_PROCESS_DATA,    // data
        NULL,              // current
        NULL,              // next
        false,              // stepped
        false,              // normal_stepped
        ProcessInit,        // state
    };



} // namespace
namespace Model {
volatile PROCESS_ENTRY_STATE* PROCESS_LIST[] =
{
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
   NULL,
    NULL
};
}

namespace ModelImpl {
volatile PROCESS_ENTRY_STATE** PROCESS_LIST = ::Model::PROCESS_LIST;
int MAX_PROCESS_LIST = 10;
SYNCHRONIZATION_CHANNEL** ALL_CHANNELS = ::Model::ALL_CHANNELS;
}

