/*
 *  Pacemaker4Mbed (c) 2014 Ariel Eizenberg - arieleiz@seas.upenn.edu.
 *  Developed for UPENN CIS 541 course project - verifiable pacemaker.
 *
 *    This file is part of Pacemaker4Mbed. You can redistribute it and/or modify
 *    it under the terms of the Academic Free License 3.0
 *	  (http://opensource.org/licenses/AFL-3.0).
 *
 */  
#pragma once
// THIS FILE WAS AUTO GENERATED BY model2mbed.exe DO NOT MODIFY!!!

#include "ModelImpl.h"

namespace Model {
// Channels
extern ModelImpl::SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_Apace; // brodcast chan Apace
extern ModelImpl::SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_Vpace; // brodcast chan Vpace
extern ModelImpl::SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_Asignal; // brodcast chan Asignal
extern ModelImpl::SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_Vsignal; // brodcast chan Vsignal
extern ModelImpl::SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_AlarmH; // brodcast chan AlarmH
extern ModelImpl::SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_AlarmL; // brodcast chan AlarmL
extern ModelImpl::SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_NoAlarm; // brodcast chan NoAlarm
extern ModelImpl::SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_HMmodechange; // urgent brodcast chan HMmodechange
extern ModelImpl::SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_testHM_random; // urgent brodcast chan testHM_random
extern ModelImpl::SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_testHM_manual; // urgent brodcast chan testHM_manual
extern ModelImpl::SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_testHM_test; // urgent brodcast chan testHM_test
extern ModelImpl::SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_testHM_gen_0; // urgent brodcast chan testHM_gen[0,1]
extern ModelImpl::SYNCHRONIZATION_CHANNEL GLOBAL_CHANNEL_VAR_testHM_gen_1; // urgent brodcast chan testHM_gen[0,1]


struct SYSTEM_VARIABLES
    {
        clk clk_GLOBAL_clkheart;
        const int int_GLOBAL_Normal_LRI;
        const int int_GLOBAL_Normal_URI;
        const int int_GLOBAL_High_MSTI;
        const int int_GLOBAL_A_minwait;
        const int int_GLOBAL_A_maxwait;
        const int int_GLOBAL_V_minwait;
        const int int_GLOBAL_V_maxwait;
        int int_GLOBAL_heartmode;
        int int_GLOBAL_cur_uri;
        int int_GLOBAL_cur_lri;
        int int_GLOBAL_cur_msti;
        clk clk_HM_DisplayAndAlarm_t;
        int int_HM_DisplayAndAlarm_aa_count;
        int int_HM_DisplayAndAlarm_aa_rate;
         int __unused__;
       public:  SYSTEM_VARIABLES() :
        int_GLOBAL_Normal_LRI(1500),
        int_GLOBAL_Normal_URI(600),
        int_GLOBAL_High_MSTI(10000),
        int_GLOBAL_A_minwait(500),
        int_GLOBAL_A_maxwait(1000),
        int_GLOBAL_V_minwait(500),
        int_GLOBAL_V_maxwait(1000),
        int_GLOBAL_heartmode(0),
        int_GLOBAL_cur_uri(600),
        int_GLOBAL_cur_lri(1500),
        int_GLOBAL_cur_msti(10000),
        int_HM_DisplayAndAlarm_aa_count(0),
        int_HM_DisplayAndAlarm_aa_rate(0),
 __unused__(0){
}
       private: SYSTEM_VARIABLES(const SYSTEM_VARIABLES& other);
       private: SYSTEM_VARIABLES& operator=(const SYSTEM_VARIABLES& other);
    };

extern SYSTEM_VARIABLES SystemVariables;

// Process - HM_ModeSwitch

extern ModelImpl::TRANSITION_ENTRY HM_ModeSwitch_TRANS_Unnamed0__Manual__0;
extern ModelImpl::TRANSITION_ENTRY HM_ModeSwitch_TRANS_Unnamed1__Init__0;
extern ModelImpl::TRANSITION_ENTRY HM_ModeSwitch_TRANS_Unnamed2__Manual__0;
extern ModelImpl::TRANSITION_ENTRY HM_ModeSwitch_TRANS_Manual__Unnamed2__0;
extern ModelImpl::TRANSITION_ENTRY HM_ModeSwitch_TRANS_Unnamed3__Manual__0;
extern ModelImpl::TRANSITION_ENTRY HM_ModeSwitch_TRANS_Manual__Unnamed3__0;
extern ModelImpl::TRANSITION_ENTRY HM_ModeSwitch_TRANS_Manual__Unnamed1__0;
extern ModelImpl::TRANSITION_ENTRY HM_ModeSwitch_TRANS_Manual__Unnamed1__1;
extern ModelImpl::TRANSITION_ENTRY HM_ModeSwitch_TRANS_Init__Unnamed1__0;
extern ModelImpl::TRANSITION_ENTRY HM_ModeSwitch_TRANS_Init__Unnamed1__1;
extern ModelImpl::TRANSITION_ENTRY HM_ModeSwitch_TRANS_Init__Unnamed0__0;
extern ModelImpl::STATE_ENTRY HM_ModeSwitch_STATE_Unnamed0;
extern ModelImpl::STATE_ENTRY HM_ModeSwitch_STATE_Unnamed1;
extern ModelImpl::STATE_ENTRY HM_ModeSwitch_STATE_Unnamed2;
extern ModelImpl::STATE_ENTRY HM_ModeSwitch_STATE_Unnamed3;
extern ModelImpl::STATE_ENTRY HM_ModeSwitch_STATE_Manual;
extern ModelImpl::STATE_ENTRY HM_ModeSwitch_STATE_Init;
extern ModelImpl::PROCESS_ENTRY HM_ModeSwitch_PROCESS;
extern ModelImpl::PROCESS_ENTRY_STATE HM_ModeSwitch_PROCESS_STATE;


// Process - HM_Asignal

extern ModelImpl::TRANSITION_ENTRY HM_Asignal_TRANS_Disabled__RHM__0;
extern ModelImpl::TRANSITION_ENTRY HM_Asignal_TRANS_RHM__Disabled__0;
extern ModelImpl::TRANSITION_ENTRY HM_Asignal_TRANS_RHM__RHM__0;
extern ModelImpl::STATE_ENTRY HM_Asignal_STATE_Disabled;
extern ModelImpl::STATE_ENTRY HM_Asignal_STATE_RHM;
extern ModelImpl::PROCESS_ENTRY HM_Asignal_PROCESS;
extern ModelImpl::PROCESS_ENTRY_STATE HM_Asignal_PROCESS_STATE;


// Process - HM_Apace

extern ModelImpl::TRANSITION_ENTRY HM_Apace_TRANS_AIdle__AIdle__0;
extern ModelImpl::STATE_ENTRY HM_Apace_STATE_AIdle;
extern ModelImpl::PROCESS_ENTRY HM_Apace_PROCESS;
extern ModelImpl::PROCESS_ENTRY_STATE HM_Apace_PROCESS_STATE;


// Process - HM_Vsignal

extern ModelImpl::TRANSITION_ENTRY HM_Vsignal_TRANS_RHM__Disabled__0;
extern ModelImpl::TRANSITION_ENTRY HM_Vsignal_TRANS_Disabled__RHM__0;
extern ModelImpl::TRANSITION_ENTRY HM_Vsignal_TRANS_RHM__RHM__0;
extern ModelImpl::STATE_ENTRY HM_Vsignal_STATE_Disabled;
extern ModelImpl::STATE_ENTRY HM_Vsignal_STATE_RHM;
extern ModelImpl::PROCESS_ENTRY HM_Vsignal_PROCESS;
extern ModelImpl::PROCESS_ENTRY_STATE HM_Vsignal_PROCESS_STATE;


// Process - HM_Vpace

extern ModelImpl::TRANSITION_ENTRY HM_Vpace_TRANS_VIdle__VIdle__0;
extern ModelImpl::STATE_ENTRY HM_Vpace_STATE_VIdle;
extern ModelImpl::PROCESS_ENTRY HM_Vpace_PROCESS;
extern ModelImpl::PROCESS_ENTRY_STATE HM_Vpace_PROCESS_STATE;


// Process - HM_Leds_Apace

extern ModelImpl::TRANSITION_ENTRY HM_Leds_Apace_TRANS_On__Off__0;
extern ModelImpl::TRANSITION_ENTRY HM_Leds_Apace_TRANS_Off__On__0;
extern ModelImpl::STATE_ENTRY HM_Leds_Apace_STATE_On;
extern ModelImpl::STATE_ENTRY HM_Leds_Apace_STATE_Off;
extern ModelImpl::PROCESS_ENTRY HM_Leds_Apace_PROCESS;
extern ModelImpl::PROCESS_ENTRY_STATE HM_Leds_Apace_PROCESS_STATE;


// Process - HM_Leds_Asignal

extern ModelImpl::TRANSITION_ENTRY HM_Leds_Asignal_TRANS_On__Off__0;
extern ModelImpl::TRANSITION_ENTRY HM_Leds_Asignal_TRANS_Off__On__0;
extern ModelImpl::STATE_ENTRY HM_Leds_Asignal_STATE_On;
extern ModelImpl::STATE_ENTRY HM_Leds_Asignal_STATE_Off;
extern ModelImpl::PROCESS_ENTRY HM_Leds_Asignal_PROCESS;
extern ModelImpl::PROCESS_ENTRY_STATE HM_Leds_Asignal_PROCESS_STATE;


// Process - HM_Leds_Vpace

extern ModelImpl::TRANSITION_ENTRY HM_Leds_Vpace_TRANS_On__Off__0;
extern ModelImpl::TRANSITION_ENTRY HM_Leds_Vpace_TRANS_Off__On__0;
extern ModelImpl::STATE_ENTRY HM_Leds_Vpace_STATE_On;
extern ModelImpl::STATE_ENTRY HM_Leds_Vpace_STATE_Off;
extern ModelImpl::PROCESS_ENTRY HM_Leds_Vpace_PROCESS;
extern ModelImpl::PROCESS_ENTRY_STATE HM_Leds_Vpace_PROCESS_STATE;


// Process - HM_Leds_Vsignal

extern ModelImpl::TRANSITION_ENTRY HM_Leds_Vsignal_TRANS_On__Off__0;
extern ModelImpl::TRANSITION_ENTRY HM_Leds_Vsignal_TRANS_Off__On__0;
extern ModelImpl::STATE_ENTRY HM_Leds_Vsignal_STATE_On;
extern ModelImpl::STATE_ENTRY HM_Leds_Vsignal_STATE_Off;
extern ModelImpl::PROCESS_ENTRY HM_Leds_Vsignal_PROCESS;
extern ModelImpl::PROCESS_ENTRY_STATE HM_Leds_Vsignal_PROCESS_STATE;


// Process - HM_DisplayAndAlarm

extern ModelImpl::TRANSITION_ENTRY HM_DisplayAndAlarm_TRANS_ShowRate__Init__0;
extern ModelImpl::TRANSITION_ENTRY HM_DisplayAndAlarm_TRANS_ShowRate__Init__1;
extern ModelImpl::TRANSITION_ENTRY HM_DisplayAndAlarm_TRANS_ShowRate__Init__2;
extern ModelImpl::TRANSITION_ENTRY HM_DisplayAndAlarm_TRANS_ShowRate__Init__3;
extern ModelImpl::TRANSITION_ENTRY HM_DisplayAndAlarm_TRANS_Init__ShowRate__0;
extern ModelImpl::TRANSITION_ENTRY HM_DisplayAndAlarm_TRANS_Incr__Init__0;
extern ModelImpl::TRANSITION_ENTRY HM_DisplayAndAlarm_TRANS_Init__Incr__0;
extern ModelImpl::TRANSITION_ENTRY HM_DisplayAndAlarm_TRANS_Init__Incr__1;
extern ModelImpl::STATE_ENTRY HM_DisplayAndAlarm_STATE_ShowRate;
extern ModelImpl::STATE_ENTRY HM_DisplayAndAlarm_STATE_Incr;
extern ModelImpl::STATE_ENTRY HM_DisplayAndAlarm_STATE_Init;
extern ModelImpl::PROCESS_ENTRY HM_DisplayAndAlarm_PROCESS;
extern ModelImpl::PROCESS_ENTRY_STATE HM_DisplayAndAlarm_PROCESS_STATE;



} // namespace

// initialize the dispatcher:
//    ModelImpl::Dispatcher disp;
//    disp.set_clock_multiplier(1000 /*us*/);
//    #ifdef DISPATCH_DEBUG
//    disp.init_debug(&pc);
//    #endif
//
// add events. examples:
//    disp.set_channel_action(&Model::Template_CHANNEL_VAR_led, LED1, ModelImpl::SendChannelModePulseUp, 250000);
//    disp.set_channel_action(&Model::Template_CHANNEL_VAR_manual, LED1, ModelImpl::SendChannelModeToggle);
//    disp.set_receive_input(&Model::GLOBAL_CHANNEL_VAR_press, p7, ModelImpl::ReceiveChannelInterruptRise);
//
// Tip: use just the templates you want in the code:
//    disp.add_process(&Model::HM_ModeSwitch_PROCESS_STATE);
//    disp.add_process(&Model::HM_Asignal_PROCESS_STATE);
//    disp.add_process(&Model::HM_Apace_PROCESS_STATE);
//    disp.add_process(&Model::HM_Vsignal_PROCESS_STATE);
//    disp.add_process(&Model::HM_Vpace_PROCESS_STATE);
//    disp.add_process(&Model::HM_Leds_Apace_PROCESS_STATE);
//    disp.add_process(&Model::HM_Leds_Asignal_PROCESS_STATE);
//    disp.add_process(&Model::HM_Leds_Vpace_PROCESS_STATE);
//    disp.add_process(&Model::HM_Leds_Vsignal_PROCESS_STATE);
//    disp.add_process(&Model::HM_DisplayAndAlarm_PROCESS_STATE);
//
// and finally run:
//    disp.run();

